/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BancorNetworkInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "claimAndConvert(address[],uint256,uint256)": FunctionFragment;
    "claimAndConvert2(address[],uint256,uint256,address,uint256)": FunctionFragment;
    "claimAndConvertFor(address[],uint256,uint256,address)": FunctionFragment;
    "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)": FunctionFragment;
    "completeXConversion(address[],address,uint256,uint256,address)": FunctionFragment;
    "conversionPath(address,address)": FunctionFragment;
    "convert(address[],uint256,uint256)": FunctionFragment;
    "convert2(address[],uint256,uint256,address,uint256)": FunctionFragment;
    "convertByPath(address[],uint256,uint256,address,address,uint256)": FunctionFragment;
    "convertFor(address[],uint256,uint256,address)": FunctionFragment;
    "convertFor2(address[],uint256,uint256,address,address,uint256)": FunctionFragment;
    "etherTokens(address)": FunctionFragment;
    "getReturnByPath(address[],uint256)": FunctionFragment;
    "maxAffiliateFee()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "rateByPath(address[],uint256)": FunctionFragment;
    "registerEtherToken(address,bool)": FunctionFragment;
    "registry()": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "setMaxAffiliateFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
    "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)": FunctionFragment;
    "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndConvert",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndConvert2",
    values: [string[], BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndConvertFor",
    values: [string[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndConvertFor2",
    values: [string[], BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeXConversion",
    values: [string[], string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "conversionPath",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convert2",
    values: [string[], BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertByPath",
    values: [string[], BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFor",
    values: [string[], BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFor2",
    values: [string[], BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "etherTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getReturnByPath",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAffiliateFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateByPath",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEtherToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAffiliateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xConvert",
    values: [
      string[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xConvert2",
    values: [
      string[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndConvert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndConvert2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndConvertFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndConvertFor2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeXConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertByPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convertFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertFor2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "etherTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReturnByPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAffiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateByPath", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAffiliateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xConvert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xConvert2", data: BytesLike): Result;

  events: {
    "Conversion(address,address,address,uint256,uint256,address)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Conversion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export class BancorNetwork extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BancorNetworkInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimAndConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAndConvert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAndConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAndConvert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAndConvertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAndConvertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAndConvertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    completeXConversion(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "completeXConversion(address[],address,uint256,uint256,address)"(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    conversionPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "conversionPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    convert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    convert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convertByPath(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    convertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    convertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    etherTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "etherTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReturnByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReturnByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    maxAffiliateFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxAffiliateFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    rateByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rateByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    registerEtherToken(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerEtherToken(address,bool)"(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxAffiliateFee(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxAffiliateFee(uint256)"(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    xConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimAndConvert(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAndConvert(address[],uint256,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAndConvert2(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAndConvert2(address[],uint256,uint256,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAndConvertFor(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAndConvertFor(address[],uint256,uint256,address)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAndConvertFor2(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  completeXConversion(
    _path: string[],
    _bancorX: string,
    _conversionId: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "completeXConversion(address[],address,uint256,uint256,address)"(
    _path: string[],
    _bancorX: string,
    _conversionId: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  conversionPath(
    _sourceToken: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "conversionPath(address,address)"(
    _sourceToken: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  convert(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convert(address[],uint256,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  convert2(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convert2(address[],uint256,uint256,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  convertByPath(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convertByPath(address[],uint256,uint256,address,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  convertFor(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convertFor(address[],uint256,uint256,address)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  convertFor2(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convertFor2(address[],uint256,uint256,address,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _beneficiary: string,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  etherTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "etherTokens(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReturnByPath(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getReturnByPath(address[],uint256)"(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  maxAffiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

  "maxAffiliateFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

  rateByPath(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rateByPath(address[],uint256)"(
    _path: string[],
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerEtherToken(
    _token: string,
    _register: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerEtherToken(address,bool)"(
    _token: string,
    _register: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "restrictRegistryUpdate(bool)"(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxAffiliateFee(
    _maxAffiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxAffiliateFee(uint256)"(
    _maxAffiliateFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawTokens(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xConvert(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _targetBlockchain: BytesLike,
    _targetAccount: BytesLike,
    _conversionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _targetBlockchain: BytesLike,
    _targetAccount: BytesLike,
    _conversionId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  xConvert2(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _targetBlockchain: BytesLike,
    _targetAccount: BytesLike,
    _conversionId: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)"(
    _path: string[],
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    _targetBlockchain: BytesLike,
    _targetAccount: BytesLike,
    _conversionId: BigNumberish,
    _affiliateAccount: string,
    _affiliateFee: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    claimAndConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAndConvert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAndConvert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndConvertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAndConvertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndConvertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeXConversion(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "completeXConversion(address[],address,uint256,uint256,address)"(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conversionPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "conversionPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    convert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertByPath(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    etherTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "etherTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReturnByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReturnByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    maxAffiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAffiliateFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

    rateByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEtherToken(
      _token: string,
      _register: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerEtherToken(address,bool)"(
      _token: string,
      _register: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    "restoreRegistry()"(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAffiliateFee(
      _maxAffiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAffiliateFee(uint256)"(
      _maxAffiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    "updateRegistry()"(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Conversion(
      _smartToken: string | null,
      _fromToken: string | null,
      _toToken: string | null,
      _fromAmount: null,
      _toAmount: null,
      _trader: null
    ): EventFilter;

    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    claimAndConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAndConvert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAndConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAndConvert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAndConvertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAndConvertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAndConvertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    completeXConversion(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "completeXConversion(address[],address,uint256,uint256,address)"(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    conversionPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "conversionPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    convert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convertByPath(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    convertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    convertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    etherTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "etherTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturnByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReturnByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAffiliateFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAffiliateFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    rateByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rateByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerEtherToken(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerEtherToken(address,bool)"(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    restoreRegistry(overrides?: Overrides): Promise<BigNumber>;

    "restoreRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxAffiliateFee(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxAffiliateFee(uint256)"(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistry(overrides?: Overrides): Promise<BigNumber>;

    "updateRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    xConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimAndConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAndConvert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAndConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAndConvert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAndConvertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAndConvertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAndConvertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAndConvertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    completeXConversion(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "completeXConversion(address[],address,uint256,uint256,address)"(
      _path: string[],
      _bancorX: string,
      _conversionId: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    conversionPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conversionPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convert(address[],uint256,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    convert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convert2(address[],uint256,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    convertByPath(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convertByPath(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    convertFor(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convertFor(address[],uint256,uint256,address)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    convertFor2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convertFor2(address[],uint256,uint256,address,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _beneficiary: string,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    etherTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "etherTokens(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReturnByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReturnByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAffiliateFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxAffiliateFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateByPath(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rateByPath(address[],uint256)"(
      _path: string[],
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerEtherToken(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerEtherToken(address,bool)"(
      _token: string,
      _register: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxAffiliateFee(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxAffiliateFee(uint256)"(
      _maxAffiliateFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xConvert(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    xConvert2(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "xConvert2(address[],uint256,uint256,bytes32,bytes32,uint256,address,uint256)"(
      _path: string[],
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      _targetBlockchain: BytesLike,
      _targetAccount: BytesLike,
      _conversionId: BigNumberish,
      _affiliateAccount: string,
      _affiliateFee: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
