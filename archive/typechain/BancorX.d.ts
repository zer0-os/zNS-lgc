/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BancorXInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "enableReporting(bool)": FunctionFragment;
    "enableXTransfers(bool)": FunctionFragment;
    "getCurrentLockLimit()": FunctionFragment;
    "getCurrentReleaseLimit()": FunctionFragment;
    "getXTransferAmount(uint256,address)": FunctionFragment;
    "limitIncPerBlock()": FunctionFragment;
    "maxLockLimit()": FunctionFragment;
    "maxReleaseLimit()": FunctionFragment;
    "minLimit()": FunctionFragment;
    "minRequiredReports()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevLockBlockNumber()": FunctionFragment;
    "prevLockLimit()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "prevReleaseBlockNumber()": FunctionFragment;
    "prevReleaseLimit()": FunctionFragment;
    "registry()": FunctionFragment;
    "reportTx(bytes32,uint256,address,uint256,uint256)": FunctionFragment;
    "reportedTxs(uint256,address)": FunctionFragment;
    "reporters(address)": FunctionFragment;
    "reportingEnabled()": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "setLimitIncPerBlock(uint256)": FunctionFragment;
    "setMaxLockLimit(uint256)": FunctionFragment;
    "setMaxReleaseLimit(uint256)": FunctionFragment;
    "setMinLimit(uint256)": FunctionFragment;
    "setMinRequiredReports(uint8)": FunctionFragment;
    "setReporter(address,bool)": FunctionFragment;
    "token()": FunctionFragment;
    "transactionIds(uint256)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
    "upgrade(address[])": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
    "xTransfer(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "xTransfersEnabled()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableReporting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "enableXTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentReleaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getXTransferAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitIncPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReleaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minRequiredReports",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevLockBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevLockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevReleaseBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevReleaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reportTx",
    values: [BytesLike, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportedTxs",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "reporters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reportingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitIncPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLockLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReleaseLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRequiredReports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReporter",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactionIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [string[]]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xTransfer",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xTransfersEnabled",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableXTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentReleaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitIncPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReleaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minRequiredReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevLockBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevLockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevReleaseBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevReleaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reportTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportedTxs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reporters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitIncPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReleaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRequiredReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xTransfersEnabled",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
    "TokensLock(address,uint256)": EventFragment;
    "TokensRelease(address,uint256)": EventFragment;
    "TxReport(address,bytes32,uint256,address,uint256,uint256)": EventFragment;
    "XTransfer(address,bytes32,bytes32,uint256,uint256)": EventFragment;
    "XTransferComplete(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxReport"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTransferComplete"): EventFragment;
}

export class BancorX extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BancorXInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    enableReporting(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableReporting(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enableXTransfers(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableXTransfers(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCurrentLockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentLockLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentReleaseLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentReleaseLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getXTransferAmount(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getXTransferAmount(uint256,address)"(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    limitIncPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "limitIncPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxLockLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReleaseLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxReleaseLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRequiredReports(overrides?: CallOverrides): Promise<[number]>;

    "minRequiredReports()"(overrides?: CallOverrides): Promise<[number]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prevLockBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prevLockBlockNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    prevLockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prevLockLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    prevReleaseBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prevReleaseBlockNumber()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    prevReleaseLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prevReleaseLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    reportTx(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reportTx(bytes32,uint256,address,uint256,uint256)"(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reportedTxs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "reportedTxs(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reporters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "reporters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reportingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "reportingEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLimitIncPerBlock(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLimitIncPerBlock(uint256)"(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxLockLimit(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxLockLimit(uint256)"(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxReleaseLimit(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxReleaseLimit(uint256)"(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinLimit(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinLimit(uint256)"(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinRequiredReports(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinRequiredReports(uint8)"(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReporter(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReporter(address,bool)"(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transactionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "transactionIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, boolean] & {
        amount: BigNumber;
        fromBlockchain: string;
        to: string;
        numOfReports: number;
        completed: boolean;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, boolean] & {
        amount: BigNumber;
        fromBlockchain: string;
        to: string;
        numOfReports: number;
        completed: boolean;
      }
    >;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgrade(
      _reporters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(address[])"(
      _reporters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    "version()"(overrides?: CallOverrides): Promise<[number]>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "xTransfer(bytes32,bytes32,uint256,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "xTransfer(bytes32,bytes32,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xTransfersEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "xTransfersEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  enableReporting(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableReporting(bool)"(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enableXTransfers(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableXTransfers(bool)"(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCurrentLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getXTransferAmount(
    _xTransferId: BigNumberish,
    _for: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getXTransferAmount(uint256,address)"(
    _xTransferId: BigNumberish,
    _for: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  limitIncPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "limitIncPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "maxLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "maxReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  minLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "minLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  minRequiredReports(overrides?: CallOverrides): Promise<number>;

  "minRequiredReports()"(overrides?: CallOverrides): Promise<number>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prevLockBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "prevLockBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  prevLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "prevLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

  prevReleaseBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "prevReleaseBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  prevReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "prevReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  reportTx(
    _fromBlockchain: BytesLike,
    _txId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    _xTransferId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reportTx(bytes32,uint256,address,uint256,uint256)"(
    _fromBlockchain: BytesLike,
    _txId: BigNumberish,
    _to: string,
    _amount: BigNumberish,
    _xTransferId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reportedTxs(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "reportedTxs(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reporters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "reporters(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reportingEnabled(overrides?: CallOverrides): Promise<boolean>;

  "reportingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "restrictRegistryUpdate(bool)"(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLimitIncPerBlock(
    _limitIncPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLimitIncPerBlock(uint256)"(
    _limitIncPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxLockLimit(
    _maxLockLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxLockLimit(uint256)"(
    _maxLockLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxReleaseLimit(
    _maxReleaseLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxReleaseLimit(uint256)"(
    _maxReleaseLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinLimit(
    _minLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinLimit(uint256)"(
    _minLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinRequiredReports(
    _minRequiredReports: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinRequiredReports(uint8)"(
    _minRequiredReports: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReporter(
    _reporter: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReporter(address,bool)"(
    _reporter: string,
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transactionIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "transactionIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, number, boolean] & {
      amount: BigNumber;
      fromBlockchain: string;
      to: string;
      numOfReports: number;
      completed: boolean;
    }
  >;

  "transactions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, number, boolean] & {
      amount: BigNumber;
      fromBlockchain: string;
      to: string;
      numOfReports: number;
      completed: boolean;
    }
  >;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgrade(
    _reporters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(address[])"(
    _reporters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  "version()"(overrides?: CallOverrides): Promise<number>;

  withdrawTokens(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "xTransfer(bytes32,bytes32,uint256,uint256)"(
    _toBlockchain: BytesLike,
    _to: BytesLike,
    _amount: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "xTransfer(bytes32,bytes32,uint256)"(
    _toBlockchain: BytesLike,
    _to: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xTransfersEnabled(overrides?: CallOverrides): Promise<boolean>;

  "xTransfersEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    enableReporting(_enable: boolean, overrides?: CallOverrides): Promise<void>;

    "enableReporting(bool)"(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    enableXTransfers(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableXTransfers(bool)"(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getXTransferAmount(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getXTransferAmount(uint256,address)"(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitIncPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "limitIncPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "minLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredReports(overrides?: CallOverrides): Promise<number>;

    "minRequiredReports()"(overrides?: CallOverrides): Promise<number>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prevLockBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "prevLockBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "prevLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

    prevReleaseBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "prevReleaseBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "prevReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    reportTx(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reportTx(bytes32,uint256,address,uint256,uint256)"(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reportedTxs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "reportedTxs(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reporters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "reporters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reportingEnabled(overrides?: CallOverrides): Promise<boolean>;

    "reportingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    "restoreRegistry()"(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitIncPerBlock(
      _limitIncPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLimitIncPerBlock(uint256)"(
      _limitIncPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLockLimit(
      _maxLockLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxLockLimit(uint256)"(
      _maxLockLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReleaseLimit(
      _maxReleaseLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxReleaseLimit(uint256)"(
      _maxReleaseLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLimit(
      _minLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinLimit(uint256)"(
      _minLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRequiredReports(
      _minRequiredReports: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinRequiredReports(uint8)"(
      _minRequiredReports: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReporter(
      _reporter: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReporter(address,bool)"(
      _reporter: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transactionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactionIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, boolean] & {
        amount: BigNumber;
        fromBlockchain: string;
        to: string;
        numOfReports: number;
        completed: boolean;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, boolean] & {
        amount: BigNumber;
        fromBlockchain: string;
        to: string;
        numOfReports: number;
        completed: boolean;
      }
    >;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    "updateRegistry()"(overrides?: CallOverrides): Promise<void>;

    upgrade(_reporters: string[], overrides?: CallOverrides): Promise<void>;

    "upgrade(address[])"(
      _reporters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;

    "version()"(overrides?: CallOverrides): Promise<number>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "xTransfer(bytes32,bytes32,uint256,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "xTransfer(bytes32,bytes32,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    xTransfersEnabled(overrides?: CallOverrides): Promise<boolean>;

    "xTransfersEnabled()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    TokensLock(_from: string | null, _amount: null): EventFilter;

    TokensRelease(_to: string | null, _amount: null): EventFilter;

    TxReport(
      _reporter: string | null,
      _fromBlockchain: null,
      _txId: null,
      _to: null,
      _amount: null,
      _xTransferId: null
    ): EventFilter;

    XTransfer(
      _from: string | null,
      _toBlockchain: null,
      _to: BytesLike | null,
      _amount: null,
      _id: null
    ): EventFilter;

    XTransferComplete(_to: null, _id: null): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    enableReporting(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableReporting(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enableXTransfers(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enableXTransfers(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCurrentLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getXTransferAmount(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getXTransferAmount(uint256,address)"(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitIncPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "limitIncPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "maxLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "minLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredReports(overrides?: CallOverrides): Promise<BigNumber>;

    "minRequiredReports()"(overrides?: CallOverrides): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevLockBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "prevLockBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevLockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "prevLockLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevReleaseBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "prevReleaseBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevReleaseLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "prevReleaseLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    reportTx(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reportTx(bytes32,uint256,address,uint256,uint256)"(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reportedTxs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reportedTxs(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reporters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "reporters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "reportingEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    restoreRegistry(overrides?: Overrides): Promise<BigNumber>;

    "restoreRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLimitIncPerBlock(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLimitIncPerBlock(uint256)"(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxLockLimit(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxLockLimit(uint256)"(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxReleaseLimit(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxReleaseLimit(uint256)"(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinLimit(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinLimit(uint256)"(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinRequiredReports(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinRequiredReports(uint8)"(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReporter(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReporter(address,bool)"(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactionIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistry(overrides?: Overrides): Promise<BigNumber>;

    "updateRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    upgrade(_reporters: string[], overrides?: Overrides): Promise<BigNumber>;

    "upgrade(address[])"(
      _reporters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "xTransfer(bytes32,bytes32,uint256,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "xTransfer(bytes32,bytes32,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xTransfersEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "xTransfersEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    enableReporting(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableReporting(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enableXTransfers(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableXTransfers(bool)"(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCurrentLockLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentLockLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentReleaseLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentReleaseLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getXTransferAmount(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getXTransferAmount(uint256,address)"(
      _xTransferId: BigNumberish,
      _for: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitIncPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "limitIncPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLockLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxLockLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReleaseLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxReleaseLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRequiredReports(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minRequiredReports()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevLockBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prevLockBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevLockLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevLockLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevReleaseBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prevReleaseBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevReleaseLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevReleaseLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportTx(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reportTx(bytes32,uint256,address,uint256,uint256)"(
      _fromBlockchain: BytesLike,
      _txId: BigNumberish,
      _to: string,
      _amount: BigNumberish,
      _xTransferId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reportedTxs(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reportedTxs(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reporters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reporters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reportingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reportingEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLimitIncPerBlock(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLimitIncPerBlock(uint256)"(
      _limitIncPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxLockLimit(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxLockLimit(uint256)"(
      _maxLockLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxReleaseLimit(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxReleaseLimit(uint256)"(
      _maxReleaseLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinLimit(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinLimit(uint256)"(
      _minLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinRequiredReports(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinRequiredReports(uint8)"(
      _minRequiredReports: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReporter(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReporter(address,bool)"(
      _reporter: string,
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactionIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    upgrade(
      _reporters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(address[])"(
      _reporters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "xTransfer(bytes32,bytes32,uint256,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "xTransfer(bytes32,bytes32,uint256)"(
      _toBlockchain: BytesLike,
      _to: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xTransfersEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xTransfersEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
