/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ConverterRegistryDataInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addConvertibleToken(address,address)": FunctionFragment;
    "addLiquidityPool(address)": FunctionFragment;
    "addSmartToken(address)": FunctionFragment;
    "getConvertibleToken(uint256)": FunctionFragment;
    "getConvertibleTokenCount()": FunctionFragment;
    "getConvertibleTokenSmartToken(address,uint256)": FunctionFragment;
    "getConvertibleTokenSmartTokenCount(address)": FunctionFragment;
    "getConvertibleTokenSmartTokens(address)": FunctionFragment;
    "getConvertibleTokens()": FunctionFragment;
    "getLiquidityPool(uint256)": FunctionFragment;
    "getLiquidityPoolCount()": FunctionFragment;
    "getLiquidityPools()": FunctionFragment;
    "getSmartToken(uint256)": FunctionFragment;
    "getSmartTokenCount()": FunctionFragment;
    "getSmartTokens()": FunctionFragment;
    "isConvertibleToken(address)": FunctionFragment;
    "isConvertibleTokenSmartToken(address,address)": FunctionFragment;
    "isLiquidityPool(address)": FunctionFragment;
    "isSmartToken(address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "registry()": FunctionFragment;
    "removeConvertibleToken(address,address)": FunctionFragment;
    "removeLiquidityPool(address)": FunctionFragment;
    "removeSmartToken(address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addConvertibleToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSmartToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleTokenSmartToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleTokenSmartTokenCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleTokenSmartTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertibleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSmartToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSmartTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSmartTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConvertibleToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isConvertibleTokenSmartToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSmartToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeConvertibleToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSmartToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConvertibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleTokenSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleTokenSmartTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleTokenSmartTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertibleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmartTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSmartTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConvertibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConvertibleTokenSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeConvertibleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSmartToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export class ConverterRegistryData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ConverterRegistryDataInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    addConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSmartToken(
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getConvertibleToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getConvertibleToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getConvertibleTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getConvertibleTokenCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConvertibleTokenSmartToken(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getConvertibleTokenSmartToken(address,uint256)"(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getConvertibleTokenSmartTokenCount(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getConvertibleTokenSmartTokenCount(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConvertibleTokenSmartTokens(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getConvertibleTokenSmartTokens(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getConvertibleTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getConvertibleTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getLiquidityPool(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getLiquidityPool(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityPools(overrides?: CallOverrides): Promise<[string[]]>;

    "getLiquidityPools()"(overrides?: CallOverrides): Promise<[string[]]>;

    getSmartToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getSmartToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSmartTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSmartTokenCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSmartTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getSmartTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    isConvertibleToken(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConvertibleToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isConvertibleTokenSmartToken(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isConvertibleTokenSmartToken(address,address)"(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLiquidityPool(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLiquidityPool(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSmartToken(_value: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isSmartToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    removeConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeSmartToken(
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  addConvertibleToken(
    _convertibleToken: string,
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addConvertibleToken(address,address)"(
    _convertibleToken: string,
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidityPool(
    _liquidityPoolAnchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidityPool(address)"(
    _liquidityPoolAnchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSmartToken(
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSmartToken(address)"(
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getConvertibleToken(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getConvertibleToken(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getConvertibleTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getConvertibleTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getConvertibleTokenSmartToken(
    _convertibleToken: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getConvertibleTokenSmartToken(address,uint256)"(
    _convertibleToken: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getConvertibleTokenSmartTokenCount(
    _convertibleToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getConvertibleTokenSmartTokenCount(address)"(
    _convertibleToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConvertibleTokenSmartTokens(
    _convertibleToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getConvertibleTokenSmartTokens(address)"(
    _convertibleToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getConvertibleTokens(overrides?: CallOverrides): Promise<string[]>;

  "getConvertibleTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getLiquidityPool(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLiquidityPool(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityPools(overrides?: CallOverrides): Promise<string[]>;

  "getLiquidityPools()"(overrides?: CallOverrides): Promise<string[]>;

  getSmartToken(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSmartToken(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSmartTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getSmartTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSmartTokens(overrides?: CallOverrides): Promise<string[]>;

  "getSmartTokens()"(overrides?: CallOverrides): Promise<string[]>;

  isConvertibleToken(
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConvertibleToken(address)"(
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isConvertibleTokenSmartToken(
    _convertibleToken: string,
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isConvertibleTokenSmartToken(address,address)"(
    _convertibleToken: string,
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLiquidityPool(_value: string, overrides?: CallOverrides): Promise<boolean>;

  "isLiquidityPool(address)"(
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSmartToken(_value: string, overrides?: CallOverrides): Promise<boolean>;

  "isSmartToken(address)"(
    _value: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  removeConvertibleToken(
    _convertibleToken: string,
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeConvertibleToken(address,address)"(
    _convertibleToken: string,
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityPool(
    _liquidityPoolAnchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidityPool(address)"(
    _liquidityPoolAnchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeSmartToken(
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeSmartToken(address)"(
    _anchor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "restrictRegistryUpdate(bool)"(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    addConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSmartToken(_anchor: string, overrides?: CallOverrides): Promise<void>;

    "addSmartToken(address)"(
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getConvertibleToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getConvertibleToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getConvertibleTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getConvertibleTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConvertibleTokenSmartToken(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getConvertibleTokenSmartToken(address,uint256)"(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getConvertibleTokenSmartTokenCount(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConvertibleTokenSmartTokenCount(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConvertibleTokenSmartTokens(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getConvertibleTokenSmartTokens(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getConvertibleTokens(overrides?: CallOverrides): Promise<string[]>;

    "getConvertibleTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getLiquidityPool(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLiquidityPool(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPools(overrides?: CallOverrides): Promise<string[]>;

    "getLiquidityPools()"(overrides?: CallOverrides): Promise<string[]>;

    getSmartToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSmartToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSmartTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getSmartTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSmartTokens(overrides?: CallOverrides): Promise<string[]>;

    "getSmartTokens()"(overrides?: CallOverrides): Promise<string[]>;

    isConvertibleToken(
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConvertibleToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isConvertibleTokenSmartToken(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isConvertibleTokenSmartToken(address,address)"(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidityPool(
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidityPool(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSmartToken(_value: string, overrides?: CallOverrides): Promise<boolean>;

    "isSmartToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    removeConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSmartToken(_anchor: string, overrides?: CallOverrides): Promise<void>;

    "removeSmartToken(address)"(
      _anchor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    "restoreRegistry()"(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    "updateRegistry()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    addConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSmartToken(_anchor: string, overrides?: Overrides): Promise<BigNumber>;

    "addSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getConvertibleToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConvertibleToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConvertibleTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getConvertibleTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConvertibleTokenSmartToken(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConvertibleTokenSmartToken(address,uint256)"(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConvertibleTokenSmartTokenCount(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConvertibleTokenSmartTokenCount(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConvertibleTokenSmartTokens(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConvertibleTokenSmartTokens(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConvertibleTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getConvertibleTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPool(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityPool(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPools(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSmartToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSmartToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSmartTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getSmartTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSmartTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getSmartTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    isConvertibleToken(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConvertibleToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isConvertibleTokenSmartToken(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isConvertibleTokenSmartToken(address,address)"(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidityPool(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidityPool(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSmartToken(_value: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isSmartToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeSmartToken(
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    restoreRegistry(overrides?: Overrides): Promise<BigNumber>;

    "restoreRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistry(overrides?: Overrides): Promise<BigNumber>;

    "updateRegistry()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    addConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSmartToken(
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getConvertibleToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConvertibleTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConvertibleTokenSmartToken(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleTokenSmartToken(address,uint256)"(
      _convertibleToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConvertibleTokenSmartTokenCount(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleTokenSmartTokenCount(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConvertibleTokenSmartTokens(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleTokenSmartTokens(address)"(
      _convertibleToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConvertibleTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConvertibleTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPool(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPool(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLiquidityPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmartToken(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSmartToken(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmartTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSmartTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSmartTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSmartTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConvertibleToken(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConvertibleToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isConvertibleTokenSmartToken(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isConvertibleTokenSmartToken(address,address)"(
      _convertibleToken: string,
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityPool(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidityPool(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSmartToken(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSmartToken(address)"(
      _value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeConvertibleToken(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeConvertibleToken(address,address)"(
      _convertibleToken: string,
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityPool(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityPool(address)"(
      _liquidityPoolAnchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeSmartToken(
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeSmartToken(address)"(
      _anchor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
