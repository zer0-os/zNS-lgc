/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityPoolV2ConverterInterface extends ethers.utils.Interface {
  functions: {
    "acceptAnchorOwnership()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptTokenOwnership()": FunctionFragment;
    "activate(address,address,address)": FunctionFragment;
    "addLiquidity(address,uint256,uint256)": FunctionFragment;
    "addReserve(address,uint32)": FunctionFragment;
    "anchor()": FunctionFragment;
    "connectorTokenCount()": FunctionFragment;
    "connectorTokens(uint256)": FunctionFragment;
    "connectors(address)": FunctionFragment;
    "conversionFee()": FunctionFragment;
    "conversionWhitelist()": FunctionFragment;
    "conversionsEnabled()": FunctionFragment;
    "convert(address,address,uint256,address,address)": FunctionFragment;
    "converterType()": FunctionFragment;
    "disableMaxStakedBalances()": FunctionFragment;
    "effectiveReserveWeights()": FunctionFragment;
    "effectiveTokensRate()": FunctionFragment;
    "externalRate()": FunctionFragment;
    "externalRateUpdateTime()": FunctionFragment;
    "getConnectorBalance(address)": FunctionFragment;
    "getReturn(address,address,uint256)": FunctionFragment;
    "hasETHReserve()": FunctionFragment;
    "isActive()": FunctionFragment;
    "isV28OrHigher()": FunctionFragment;
    "liquidationLimit(address)": FunctionFragment;
    "maxConversionFee()": FunctionFragment;
    "maxStakedBalanceEnabled()": FunctionFragment;
    "maxStakedBalances(address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "oracleDeviationFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolToken(address)": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "primaryReserveToken()": FunctionFragment;
    "registry()": FunctionFragment;
    "removeLiquidity(address,uint256,uint256)": FunctionFragment;
    "removeLiquidityReturnAndFee(address,uint256)": FunctionFragment;
    "reserveAmplifiedBalance(address)": FunctionFragment;
    "reserveBalance(address)": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "reserveStakedBalance(address)": FunctionFragment;
    "reserveTokenCount()": FunctionFragment;
    "reserveTokens(uint256)": FunctionFragment;
    "reserveWeight(address)": FunctionFragment;
    "reserves(address)": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "secondaryReserveToken()": FunctionFragment;
    "setConversionFee(uint32)": FunctionFragment;
    "setConversionWhitelist(address)": FunctionFragment;
    "setMaxStakedBalances(uint256,uint256)": FunctionFragment;
    "setOracleDeviationFee(uint32)": FunctionFragment;
    "setReserveStakedBalance(address,uint256)": FunctionFragment;
    "targetAmountAndFee(address,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferAnchorOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
    "upgrade()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAnchorOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTokenOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "anchor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "connectorTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "conversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "converterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableMaxStakedBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveReserveWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveTokensRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalRateUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectorBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReturn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasETHReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isV28OrHigher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxConversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakedBalanceEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxStakedBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleDeviationFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryReserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityReturnAndFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAmplifiedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveStakedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWeight",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "reserves", values: [string]): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryReserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStakedBalances",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleDeviationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveStakedBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "targetAmountAndFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAnchorOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "converterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableMaxStakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveReserveWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveTokensRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalRateUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReturn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasETHReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isV28OrHigher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakedBalanceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleDeviationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityReturnAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAmplifiedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleDeviationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAmountAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "Activation(uint16,address,bool)": EventFragment;
    "Conversion(address,address,address,uint256,uint256,int256)": EventFragment;
    "ConversionFeeUpdate(uint32,uint32)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,uint256,uint256)": EventFragment;
    "OracleDeviationFeeUpdate(uint32,uint32)": EventFragment;
    "OwnerUpdate(address,address)": EventFragment;
    "TokenRateUpdate(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Activation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Conversion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConversionFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleDeviationFeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRateUpdate"): EventFragment;
}

export class LiquidityPoolV2Converter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityPoolV2ConverterInterface;

  functions: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptAnchorOwnership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptTokenOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptTokenOwnership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    activate(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activate(address,address,address)"(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(address,uint256,uint256)"(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReserve(address,uint32)"(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    anchor(overrides?: CallOverrides): Promise<[string]>;

    "anchor()"(overrides?: CallOverrides): Promise<[string]>;

    connectorTokenCount(overrides?: CallOverrides): Promise<[number]>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<[number]>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<[number]>;

    "conversionFee()"(overrides?: CallOverrides): Promise<[number]>;

    conversionWhitelist(overrides?: CallOverrides): Promise<[string]>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<[string]>;

    conversionsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "conversionsEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    converterType(overrides?: CallOverrides): Promise<[number]>;

    "converterType()"(overrides?: CallOverrides): Promise<[number]>;

    disableMaxStakedBalances(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableMaxStakedBalances()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    effectiveReserveWeights(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "effectiveReserveWeights()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    effectiveTokensRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "effectiveTokensRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    externalRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

    "externalRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

    externalRateUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "externalRateUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReturn(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasETHReserve(overrides?: CallOverrides): Promise<[boolean]>;

    "hasETHReserve()"(overrides?: CallOverrides): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    isV28OrHigher(overrides?: CallOverrides): Promise<[boolean]>;

    "isV28OrHigher()"(overrides?: CallOverrides): Promise<[boolean]>;

    liquidationLimit(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "liquidationLimit(address)"(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxConversionFee(overrides?: CallOverrides): Promise<[number]>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<[number]>;

    maxStakedBalanceEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "maxStakedBalanceEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    maxStakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maxStakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracleDeviationFee(overrides?: CallOverrides): Promise<[number]>;

    "oracleDeviationFee()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    poolToken(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "poolToken(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    "priceOracle()"(overrides?: CallOverrides): Promise<[string]>;

    primaryReserveToken(overrides?: CallOverrides): Promise<[string]>;

    "primaryReserveToken()"(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,uint256,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidityReturnAndFee(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "removeLiquidityReturnAndFee(address,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reserveAmplifiedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reserveAmplifiedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveRatio(overrides?: CallOverrides): Promise<[number]>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<[number]>;

    reserveStakedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reserveStakedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveTokenCount(overrides?: CallOverrides): Promise<[number]>;

    "reserveTokenCount()"(overrides?: CallOverrides): Promise<[number]>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "reserveWeight(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    reserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, boolean, boolean, boolean] & {
        balance: BigNumber;
        weight: number;
        deprecated1: boolean;
        deprecated2: boolean;
        isSet: boolean;
      }
    >;

    "reserves(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, boolean, boolean, boolean] & {
        balance: BigNumber;
        weight: number;
        deprecated1: boolean;
        deprecated2: boolean;
        isSet: boolean;
      }
    >;

    restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    secondaryReserveToken(overrides?: CallOverrides): Promise<[string]>;

    "secondaryReserveToken()"(overrides?: CallOverrides): Promise<[string]>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxStakedBalances(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxStakedBalances(uint256,uint256)"(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleDeviationFee(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleDeviationFee(uint32)"(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReserveStakedBalance(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReserveStakedBalance(address,uint256)"(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgrade(overrides?: Overrides): Promise<ContractTransaction>;

    "upgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    "version()"(overrides?: CallOverrides): Promise<[number]>;

    withdrawETH(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptAnchorOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptAnchorOwnership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptTokenOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptTokenOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  activate(
    _primaryReserveToken: string,
    _primaryReserveOracle: string,
    _secondaryReserveOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activate(address,address,address)"(
    _primaryReserveToken: string,
    _primaryReserveOracle: string,
    _secondaryReserveOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    _reserveToken: string,
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(address,uint256,uint256)"(
    _reserveToken: string,
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  addReserve(
    _token: string,
    _weight: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReserve(address,uint32)"(
    _token: string,
    _weight: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  anchor(overrides?: CallOverrides): Promise<string>;

  "anchor()"(overrides?: CallOverrides): Promise<string>;

  connectorTokenCount(overrides?: CallOverrides): Promise<number>;

  "connectorTokenCount()"(overrides?: CallOverrides): Promise<number>;

  connectorTokens(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "connectorTokens(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  connectors(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  "connectors(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  conversionFee(overrides?: CallOverrides): Promise<number>;

  "conversionFee()"(overrides?: CallOverrides): Promise<number>;

  conversionWhitelist(overrides?: CallOverrides): Promise<string>;

  "conversionWhitelist()"(overrides?: CallOverrides): Promise<string>;

  conversionsEnabled(overrides?: CallOverrides): Promise<boolean>;

  "conversionsEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  convert(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    _trader: string,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convert(address,address,uint256,address,address)"(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    _trader: string,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  converterType(overrides?: CallOverrides): Promise<number>;

  "converterType()"(overrides?: CallOverrides): Promise<number>;

  disableMaxStakedBalances(overrides?: Overrides): Promise<ContractTransaction>;

  "disableMaxStakedBalances()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  effectiveReserveWeights(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "effectiveReserveWeights()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  effectiveTokensRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "effectiveTokensRate()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  externalRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

  "externalRate()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

  externalRateUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "externalRateUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  getConnectorBalance(
    _connectorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getConnectorBalance(address)"(
    _connectorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReturn(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getReturn(address,address,uint256)"(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  hasETHReserve(overrides?: CallOverrides): Promise<boolean>;

  "hasETHReserve()"(overrides?: CallOverrides): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  "isActive()"(overrides?: CallOverrides): Promise<boolean>;

  isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

  "isV28OrHigher()"(overrides?: CallOverrides): Promise<boolean>;

  liquidationLimit(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "liquidationLimit(address)"(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxConversionFee(overrides?: CallOverrides): Promise<number>;

  "maxConversionFee()"(overrides?: CallOverrides): Promise<number>;

  maxStakedBalanceEnabled(overrides?: CallOverrides): Promise<boolean>;

  "maxStakedBalanceEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  maxStakedBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "maxStakedBalances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

  oracleDeviationFee(overrides?: CallOverrides): Promise<number>;

  "oracleDeviationFee()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  poolToken(_reserveToken: string, overrides?: CallOverrides): Promise<string>;

  "poolToken(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  "priceOracle()"(overrides?: CallOverrides): Promise<string>;

  primaryReserveToken(overrides?: CallOverrides): Promise<string>;

  "primaryReserveToken()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _poolToken: string,
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,uint256,uint256)"(
    _poolToken: string,
    _amount: BigNumberish,
    _minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidityReturnAndFee(
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "removeLiquidityReturnAndFee(address,uint256)"(
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  reserveAmplifiedBalance(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reserveAmplifiedBalance(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveBalance(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reserveBalance(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveRatio(overrides?: CallOverrides): Promise<number>;

  "reserveRatio()"(overrides?: CallOverrides): Promise<number>;

  reserveStakedBalance(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reserveStakedBalance(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveTokenCount(overrides?: CallOverrides): Promise<number>;

  "reserveTokenCount()"(overrides?: CallOverrides): Promise<number>;

  reserveTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reserveTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reserveWeight(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "reserveWeight(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  reserves(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, boolean, boolean, boolean] & {
      balance: BigNumber;
      weight: number;
      deprecated1: boolean;
      deprecated2: boolean;
      isSet: boolean;
    }
  >;

  "reserves(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, boolean, boolean, boolean] & {
      balance: BigNumber;
      weight: number;
      deprecated1: boolean;
      deprecated2: boolean;
      isSet: boolean;
    }
  >;

  restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "restrictRegistryUpdate(bool)"(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  secondaryReserveToken(overrides?: CallOverrides): Promise<string>;

  "secondaryReserveToken()"(overrides?: CallOverrides): Promise<string>;

  setConversionFee(
    _conversionFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConversionFee(uint32)"(
    _conversionFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConversionWhitelist(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConversionWhitelist(address)"(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxStakedBalances(
    _reserve1MaxStakedBalance: BigNumberish,
    _reserve2MaxStakedBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxStakedBalances(uint256,uint256)"(
    _reserve1MaxStakedBalance: BigNumberish,
    _reserve2MaxStakedBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleDeviationFee(
    _oracleDeviationFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleDeviationFee(uint32)"(
    _oracleDeviationFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReserveStakedBalance(
    _reserveToken: string,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReserveStakedBalance(address,uint256)"(
    _reserveToken: string,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  targetAmountAndFee(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "targetAmountAndFee(address,address,uint256)"(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferAnchorOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAnchorOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferTokenOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferTokenOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgrade(overrides?: Overrides): Promise<ContractTransaction>;

  "upgrade()"(overrides?: Overrides): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  "version()"(overrides?: CallOverrides): Promise<number>;

  withdrawETH(_to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawETH(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAnchorOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptAnchorOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptTokenOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptTokenOwnership()"(overrides?: CallOverrides): Promise<void>;

    activate(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "activate(address,address,address)"(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,uint256)"(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReserve(address,uint32)"(
      _token: string,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anchor(overrides?: CallOverrides): Promise<string>;

    "anchor()"(overrides?: CallOverrides): Promise<string>;

    connectorTokenCount(overrides?: CallOverrides): Promise<number>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<number>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<number>;

    "conversionFee()"(overrides?: CallOverrides): Promise<number>;

    conversionWhitelist(overrides?: CallOverrides): Promise<string>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<string>;

    conversionsEnabled(overrides?: CallOverrides): Promise<boolean>;

    "conversionsEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<number>;

    "converterType()"(overrides?: CallOverrides): Promise<number>;

    disableMaxStakedBalances(overrides?: CallOverrides): Promise<void>;

    "disableMaxStakedBalances()"(overrides?: CallOverrides): Promise<void>;

    effectiveReserveWeights(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "effectiveReserveWeights()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    effectiveTokensRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "effectiveTokensRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    externalRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

    "externalRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { n: BigNumber; d: BigNumber }>;

    externalRateUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "externalRateUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getReturn(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasETHReserve(overrides?: CallOverrides): Promise<boolean>;

    "hasETHReserve()"(overrides?: CallOverrides): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    isV28OrHigher(overrides?: CallOverrides): Promise<boolean>;

    "isV28OrHigher()"(overrides?: CallOverrides): Promise<boolean>;

    liquidationLimit(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidationLimit(address)"(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxConversionFee(overrides?: CallOverrides): Promise<number>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<number>;

    maxStakedBalanceEnabled(overrides?: CallOverrides): Promise<boolean>;

    "maxStakedBalanceEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    maxStakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxStakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

    oracleDeviationFee(overrides?: CallOverrides): Promise<number>;

    "oracleDeviationFee()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    poolToken(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "poolToken(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    "priceOracle()"(overrides?: CallOverrides): Promise<string>;

    primaryReserveToken(overrides?: CallOverrides): Promise<string>;

    "primaryReserveToken()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,uint256,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityReturnAndFee(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "removeLiquidityReturnAndFee(address,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reserveAmplifiedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveAmplifiedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<number>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<number>;

    reserveStakedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveStakedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokenCount(overrides?: CallOverrides): Promise<number>;

    "reserveTokenCount()"(overrides?: CallOverrides): Promise<number>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "reserveWeight(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    reserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, boolean, boolean, boolean] & {
        balance: BigNumber;
        weight: number;
        deprecated1: boolean;
        deprecated2: boolean;
        isSet: boolean;
      }
    >;

    "reserves(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, boolean, boolean, boolean] & {
        balance: BigNumber;
        weight: number;
        deprecated1: boolean;
        deprecated2: boolean;
        isSet: boolean;
      }
    >;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    "restoreRegistry()"(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    secondaryReserveToken(overrides?: CallOverrides): Promise<string>;

    "secondaryReserveToken()"(overrides?: CallOverrides): Promise<string>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStakedBalances(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxStakedBalances(uint256,uint256)"(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleDeviationFee(
      _oracleDeviationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleDeviationFee(uint32)"(
      _oracleDeviationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveStakedBalance(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserveStakedBalance(address,uint256)"(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    "updateRegistry()"(overrides?: CallOverrides): Promise<void>;

    upgrade(overrides?: CallOverrides): Promise<void>;

    "upgrade()"(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;

    "version()"(overrides?: CallOverrides): Promise<number>;

    withdrawETH(_to: string, overrides?: CallOverrides): Promise<void>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Activation(
      _type: BigNumberish | null,
      _anchor: string | null,
      _activated: boolean | null
    ): EventFilter;

    Conversion(
      _fromToken: string | null,
      _toToken: string | null,
      _trader: string | null,
      _amount: null,
      _return: null,
      _conversionFee: null
    ): EventFilter;

    ConversionFeeUpdate(_prevFee: null, _newFee: null): EventFilter;

    LiquidityAdded(
      _provider: string | null,
      _reserveToken: string | null,
      _amount: null,
      _newBalance: null,
      _newSupply: null
    ): EventFilter;

    LiquidityRemoved(
      _provider: string | null,
      _reserveToken: string | null,
      _amount: null,
      _newBalance: null,
      _newSupply: null
    ): EventFilter;

    OracleDeviationFeeUpdate(_prevFee: null, _newFee: null): EventFilter;

    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): EventFilter;

    TokenRateUpdate(
      _token1: string | null,
      _token2: string | null,
      _rateN: null,
      _rateD: null
    ): EventFilter;
  };

  estimateGas: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptAnchorOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    acceptTokenOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptTokenOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    activate(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activate(address,address,address)"(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,uint256)"(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReserve(address,uint32)"(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    "anchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectors(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "conversionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    conversionWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<BigNumber>;

    conversionsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "conversionsEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<BigNumber>;

    "converterType()"(overrides?: CallOverrides): Promise<BigNumber>;

    disableMaxStakedBalances(overrides?: Overrides): Promise<BigNumber>;

    "disableMaxStakedBalances()"(overrides?: Overrides): Promise<BigNumber>;

    effectiveReserveWeights(overrides?: CallOverrides): Promise<BigNumber>;

    "effectiveReserveWeights()"(overrides?: CallOverrides): Promise<BigNumber>;

    effectiveTokensRate(overrides?: CallOverrides): Promise<BigNumber>;

    "effectiveTokensRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    externalRate(overrides?: CallOverrides): Promise<BigNumber>;

    "externalRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    externalRateUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "externalRateUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReturn(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasETHReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "hasETHReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    isV28OrHigher(overrides?: CallOverrides): Promise<BigNumber>;

    "isV28OrHigher()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationLimit(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidationLimit(address)"(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxConversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakedBalanceEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "maxStakedBalanceEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxStakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "maxStakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleDeviationFee(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleDeviationFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolToken(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "priceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    primaryReserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "primaryReserveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(address,uint256,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidityReturnAndFee(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeLiquidityReturnAndFee(address,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveAmplifiedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveAmplifiedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveStakedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveStakedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveWeight(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "reserves(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restoreRegistry(overrides?: Overrides): Promise<BigNumber>;

    "restoreRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    secondaryReserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    "secondaryReserveToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxStakedBalances(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxStakedBalances(uint256,uint256)"(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleDeviationFee(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracleDeviationFee(uint32)"(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReserveStakedBalance(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReserveStakedBalance(address,uint256)"(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistry(overrides?: Overrides): Promise<BigNumber>;

    "updateRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    upgrade(overrides?: Overrides): Promise<BigNumber>;

    "upgrade()"(overrides?: Overrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptAnchorOwnership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptTokenOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptTokenOwnership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    activate(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activate(address,address,address)"(
      _primaryReserveToken: string,
      _primaryReserveOracle: string,
      _secondaryReserveOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,uint256,uint256)"(
      _reserveToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    addReserve(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReserve(address,uint32)"(
      _token: string,
      _weight: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    anchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anchor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectorTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "conversionFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conversionWhitelist()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conversionsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conversionsEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    converterType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "converterType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableMaxStakedBalances(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableMaxStakedBalances()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    effectiveReserveWeights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveReserveWeights()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveTokensRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "effectiveTokensRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "externalRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalRateUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "externalRateUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReturn(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReturn(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasETHReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasETHReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isV28OrHigher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isV28OrHigher()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationLimit(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationLimit(address)"(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxConversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxConversionFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxStakedBalanceEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxStakedBalanceEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxStakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxStakedBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleDeviationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracleDeviationFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolToken(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primaryReserveToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "primaryReserveToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,uint256,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      _minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturnAndFee(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidityReturnAndFee(address,uint256)"(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveAmplifiedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveAmplifiedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveStakedBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveStakedBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveWeight(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveWeight(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserves(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    secondaryReserveToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "secondaryReserveToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxStakedBalances(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxStakedBalances(uint256,uint256)"(
      _reserve1MaxStakedBalance: BigNumberish,
      _reserve2MaxStakedBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleDeviationFee(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleDeviationFee(uint32)"(
      _oracleDeviationFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReserveStakedBalance(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReserveStakedBalance(address,uint256)"(
      _reserveToken: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    upgrade(overrides?: Overrides): Promise<PopulatedTransaction>;

    "upgrade()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
