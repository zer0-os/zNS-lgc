/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "lastUpdateTime()": FunctionFragment;
    "latestRate(address,address)": FunctionFragment;
    "latestRateAndUpdateTime(address,address)": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenAOracle()": FunctionFragment;
    "tokenB()": FunctionFragment;
    "tokenBOracle()": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tokensToOracles(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRateAndUpdateTime",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToOracles",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRateAndUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToOracles",
    data: BytesLike
  ): Result;

  events: {};
}

export class PriceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceOracleInterface;

  functions: {
    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRate(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "latestRate(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    latestRateAndUpdateTime(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "latestRateAndUpdateTime(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    "tokenA()"(overrides?: CallOverrides): Promise<[string]>;

    tokenAOracle(overrides?: CallOverrides): Promise<[string]>;

    "tokenAOracle()"(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;

    "tokenB()"(overrides?: CallOverrides): Promise<[string]>;

    tokenBOracle(overrides?: CallOverrides): Promise<[string]>;

    "tokenBOracle()"(overrides?: CallOverrides): Promise<[string]>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    "tokenDecimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokensToOracles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "tokensToOracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  latestRate(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "latestRate(address,address)"(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  latestRateAndUpdateTime(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "latestRateAndUpdateTime(address,address)"(
    _tokenA: string,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  "tokenA()"(overrides?: CallOverrides): Promise<string>;

  tokenAOracle(overrides?: CallOverrides): Promise<string>;

  "tokenAOracle()"(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  "tokenB()"(overrides?: CallOverrides): Promise<string>;

  tokenBOracle(overrides?: CallOverrides): Promise<string>;

  "tokenBOracle()"(overrides?: CallOverrides): Promise<string>;

  tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<number>;

  "tokenDecimals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  tokensToOracles(arg0: string, overrides?: CallOverrides): Promise<string>;

  "tokensToOracles(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRate(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "latestRate(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    latestRateAndUpdateTime(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "latestRateAndUpdateTime(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    "tokenA()"(overrides?: CallOverrides): Promise<string>;

    tokenAOracle(overrides?: CallOverrides): Promise<string>;

    "tokenAOracle()"(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;

    "tokenB()"(overrides?: CallOverrides): Promise<string>;

    tokenBOracle(overrides?: CallOverrides): Promise<string>;

    "tokenBOracle()"(overrides?: CallOverrides): Promise<string>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<number>;

    "tokenDecimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    tokensToOracles(arg0: string, overrides?: CallOverrides): Promise<string>;

    "tokensToOracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRate(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestRate(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestRateAndUpdateTime(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestRateAndUpdateTime(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenA()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenAOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenB()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenBOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenDecimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensToOracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensToOracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRate(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestRate(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRateAndUpdateTime(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestRateAndUpdateTime(address,address)"(
      _tokenA: string,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenAOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenB()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenBOracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenDecimals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensToOracles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensToOracles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
