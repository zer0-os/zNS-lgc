/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestReentrancyGuardInterface extends ethers.utils.Interface {
  functions: {
    "calls()": FunctionFragment;
    "protectedMethod()": FunctionFragment;
    "unprotectedMethod()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "calls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protectedMethod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unprotectedMethod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "calls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectedMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unprotectedMethod",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestReentrancyGuard extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestReentrancyGuardInterface;

  functions: {
    calls(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calls()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    protectedMethod(overrides?: Overrides): Promise<ContractTransaction>;

    "protectedMethod()"(overrides?: Overrides): Promise<ContractTransaction>;

    unprotectedMethod(overrides?: Overrides): Promise<ContractTransaction>;

    "unprotectedMethod()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  calls(overrides?: CallOverrides): Promise<BigNumber>;

  "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

  protectedMethod(overrides?: Overrides): Promise<ContractTransaction>;

  "protectedMethod()"(overrides?: Overrides): Promise<ContractTransaction>;

  unprotectedMethod(overrides?: Overrides): Promise<ContractTransaction>;

  "unprotectedMethod()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    calls(overrides?: CallOverrides): Promise<BigNumber>;

    "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

    protectedMethod(overrides?: CallOverrides): Promise<void>;

    "protectedMethod()"(overrides?: CallOverrides): Promise<void>;

    unprotectedMethod(overrides?: CallOverrides): Promise<void>;

    "unprotectedMethod()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calls(overrides?: CallOverrides): Promise<BigNumber>;

    "calls()"(overrides?: CallOverrides): Promise<BigNumber>;

    protectedMethod(overrides?: Overrides): Promise<BigNumber>;

    "protectedMethod()"(overrides?: Overrides): Promise<BigNumber>;

    unprotectedMethod(overrides?: Overrides): Promise<BigNumber>;

    "unprotectedMethod()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calls()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectedMethod(overrides?: Overrides): Promise<PopulatedTransaction>;

    "protectedMethod()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unprotectedMethod(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unprotectedMethod()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
