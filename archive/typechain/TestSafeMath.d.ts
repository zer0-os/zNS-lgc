/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestSafeMathInterface extends ethers.utils.Interface {
  functions: {
    "testSafeAdd(uint256,uint256)": FunctionFragment;
    "testSafeDiv(uint256,uint256)": FunctionFragment;
    "testSafeMul(uint256,uint256)": FunctionFragment;
    "testSafeSub(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testSafeAdd",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testSafeSub",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "testSafeAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeDiv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeMul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testSafeSub",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestSafeMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestSafeMathInterface;

  functions: {
    testSafeAdd(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "testSafeAdd(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testSafeDiv(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "testSafeDiv(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testSafeMul(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "testSafeMul(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testSafeSub(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "testSafeSub(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  testSafeAdd(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "testSafeAdd(uint256,uint256)"(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testSafeDiv(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "testSafeDiv(uint256,uint256)"(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testSafeMul(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "testSafeMul(uint256,uint256)"(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testSafeSub(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "testSafeSub(uint256,uint256)"(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    testSafeAdd(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeAdd(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeDiv(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeDiv(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeMul(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeMul(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeSub(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeSub(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    testSafeAdd(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeAdd(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeDiv(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeDiv(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeMul(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeMul(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSafeSub(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSafeSub(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testSafeAdd(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testSafeAdd(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSafeDiv(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testSafeDiv(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSafeMul(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testSafeMul(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSafeSub(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testSafeSub(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
