/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { NonupgradeableProxy } from "../NonupgradeableProxy";

export class NonupgradeableProxy__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    __implementation: string,
    overrides?: Overrides
  ): Promise<NonupgradeableProxy> {
    return super.deploy(
      __implementation,
      overrides || {}
    ) as Promise<NonupgradeableProxy>;
  }
  getDeployTransaction(
    __implementation: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(__implementation, overrides || {});
  }
  attach(address: string): NonupgradeableProxy {
    return super.attach(address) as NonupgradeableProxy;
  }
  connect(signer: Signer): NonupgradeableProxy__factory {
    return super.connect(signer) as NonupgradeableProxy__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonupgradeableProxy {
    return new Contract(address, _abi, signerOrProvider) as NonupgradeableProxy;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "__implementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102013803806102018339818101604052602081101561003357600080fd5b505161003e81610044565b506100bc565b610057816100b660201b61007a1760201c565b6100925760405162461bcd60e51b81526004018080602001828103825260398152602001806101c86039913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3b151590565b60fe806100ca6000396000f3fe608060405260043610601f5760003560e01c80635c60da1b14603157602b565b36602b576029605f565b005b6029605f565b348015603c57600080fd5b506043606d565b604080516001600160a01b039092168252519081900360200190f35b606b60676080565b60a5565b565b600060756080565b905090565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b3660008037600080366000845af43d6000803e80801560c3573d6000f35b3d6000fdfea2646970667358221220a12fb23073e04ca9feba81b94533c3d0f3acd329b2bb8b14692b5146b91b524d64736f6c634300070600334e6f6e7570677261646561626c6550726f78793a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374";
