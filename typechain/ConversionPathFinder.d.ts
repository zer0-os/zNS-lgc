/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ConversionPathFinderInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "anchorToken()": FunctionFragment;
    "findPath(address,address)": FunctionFragment;
    "newOwner()": FunctionFragment;
    "onlyOwnerCanUpdateRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "prevRegistry()": FunctionFragment;
    "registry()": FunctionFragment;
    "restoreRegistry()": FunctionFragment;
    "restrictRegistryUpdate(bool)": FunctionFragment;
    "setAnchorToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anchorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findPath",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "restoreRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictRegistryUpdate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnchorToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnerCanUpdateRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "restoreRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictRegistryUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnchorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistry",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdate(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdate"): EventFragment;
}

export class ConversionPathFinder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ConversionPathFinderInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    anchorToken(overrides?: CallOverrides): Promise<[string]>;

    "anchorToken()"(overrides?: CallOverrides): Promise<[string]>;

    findPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "findPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    "newOwner()"(overrides?: CallOverrides): Promise<[string]>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<[boolean]>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prevRegistry(overrides?: CallOverrides): Promise<[string]>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAnchorToken(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAnchorToken(address)"(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  anchorToken(overrides?: CallOverrides): Promise<string>;

  "anchorToken()"(overrides?: CallOverrides): Promise<string>;

  findPath(
    _sourceToken: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "findPath(address,address)"(
    _sourceToken: string,
    _targetToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  "newOwner()"(overrides?: CallOverrides): Promise<string>;

  onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

  "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prevRegistry(overrides?: CallOverrides): Promise<string>;

  "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  restoreRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "restoreRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  restrictRegistryUpdate(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "restrictRegistryUpdate(bool)"(
    _onlyOwnerCanUpdateRegistry: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAnchorToken(
    _anchorToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAnchorToken(address)"(
    _anchorToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRegistry(overrides?: Overrides): Promise<ContractTransaction>;

  "updateRegistry()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    anchorToken(overrides?: CallOverrides): Promise<string>;

    "anchorToken()"(overrides?: CallOverrides): Promise<string>;

    findPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "findPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    "newOwner()"(overrides?: CallOverrides): Promise<string>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<boolean>;

    "onlyOwnerCanUpdateRegistry()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prevRegistry(overrides?: CallOverrides): Promise<string>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    restoreRegistry(overrides?: CallOverrides): Promise<void>;

    "restoreRegistry()"(overrides?: CallOverrides): Promise<void>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnchorToken(
      _anchorToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnchorToken(address)"(
      _anchorToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRegistry(overrides?: CallOverrides): Promise<void>;

    "updateRegistry()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnerUpdate(
      _prevOwner: string | null,
      _newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    anchorToken(overrides?: CallOverrides): Promise<BigNumber>;

    "anchorToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    findPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "newOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    onlyOwnerCanUpdateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    restoreRegistry(overrides?: Overrides): Promise<BigNumber>;

    "restoreRegistry()"(overrides?: Overrides): Promise<BigNumber>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAnchorToken(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAnchorToken(address)"(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRegistry(overrides?: Overrides): Promise<BigNumber>;

    "updateRegistry()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    anchorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anchorToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findPath(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findPath(address,address)"(
      _sourceToken: string,
      _targetToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyOwnerCanUpdateRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onlyOwnerCanUpdateRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    restoreRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "restoreRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    restrictRegistryUpdate(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "restrictRegistryUpdate(bool)"(
      _onlyOwnerCanUpdateRegistry: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAnchorToken(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAnchorToken(address)"(
      _anchorToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRegistry(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateRegistry()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
