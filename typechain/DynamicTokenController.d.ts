/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DynamicTokenControllerInterface extends ethers.utils.Interface {
  functions: {
    "DSTokenImplementation()": FunctionFragment;
    "DynamicConverterImplementation()": FunctionFragment;
    "bancorRegistry()": FunctionFragment;
    "converters(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "onSetZnsController(address,address,uint256,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "stakingController()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DSTokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DynamicConverterImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bancorRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "converters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onSetZnsController",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DSTokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DynamicConverterImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bancorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "converters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSetZnsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {};
}

export class DynamicTokenController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DynamicTokenControllerInterface;

  functions: {
    DSTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    "DSTokenImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    DynamicConverterImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "DynamicConverterImplementation()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    bancorRegistry(overrides?: CallOverrides): Promise<[string]>;

    "bancorRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    converters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "converters(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address)"(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    stakingController(overrides?: CallOverrides): Promise<[string]>;

    "stakingController()"(overrides?: CallOverrides): Promise<[string]>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DSTokenImplementation(overrides?: CallOverrides): Promise<string>;

  "DSTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

  DynamicConverterImplementation(overrides?: CallOverrides): Promise<string>;

  "DynamicConverterImplementation()"(
    overrides?: CallOverrides
  ): Promise<string>;

  bancorRegistry(overrides?: CallOverrides): Promise<string>;

  "bancorRegistry()"(overrides?: CallOverrides): Promise<string>;

  converters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "converters(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _dsImpl: string,
    _dconvImpl: string,
    _stakingController: string,
    _registry: string,
    _bancorRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address)"(
    _dsImpl: string,
    _dconvImpl: string,
    _stakingController: string,
    _registry: string,
    _bancorRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onSetZnsController(
    sender: string,
    oldController: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onSetZnsController(address,address,uint256,bytes)"(
    sender: string,
    oldController: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  stakingController(overrides?: CallOverrides): Promise<string>;

  "stakingController()"(overrides?: CallOverrides): Promise<string>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DSTokenImplementation(overrides?: CallOverrides): Promise<string>;

    "DSTokenImplementation()"(overrides?: CallOverrides): Promise<string>;

    DynamicConverterImplementation(overrides?: CallOverrides): Promise<string>;

    "DynamicConverterImplementation()"(
      overrides?: CallOverrides
    ): Promise<string>;

    bancorRegistry(overrides?: CallOverrides): Promise<string>;

    "bancorRegistry()"(overrides?: CallOverrides): Promise<string>;

    converters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "converters(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address)"(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    stakingController(overrides?: CallOverrides): Promise<string>;

    "stakingController()"(overrides?: CallOverrides): Promise<string>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DSTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "DSTokenImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    DynamicConverterImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DynamicConverterImplementation()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bancorRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "bancorRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    converters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "converters(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address)"(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingController(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingController()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DSTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DSTokenImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DynamicConverterImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DynamicConverterImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bancorRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bancorRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    converters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "converters(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address)"(
      _dsImpl: string,
      _dconvImpl: string,
      _stakingController: string,
      _registry: string,
      _bancorRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
