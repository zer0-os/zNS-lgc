/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IConverterInterface extends ethers.utils.Interface {
  functions: {
    "acceptAnchorOwnership()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptTokenOwnership()": FunctionFragment;
    "addReserve(address,uint32)": FunctionFragment;
    "anchor()": FunctionFragment;
    "connectorTokenCount()": FunctionFragment;
    "connectorTokens(uint256)": FunctionFragment;
    "connectors(address)": FunctionFragment;
    "conversionFee()": FunctionFragment;
    "conversionWhitelist()": FunctionFragment;
    "convert(address,address,uint256,address,address)": FunctionFragment;
    "converterType()": FunctionFragment;
    "getConnectorBalance(address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "maxConversionFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "reserveBalance(address)": FunctionFragment;
    "reserveTokens(uint256)": FunctionFragment;
    "setConversionFee(uint32)": FunctionFragment;
    "setConversionWhitelist(address)": FunctionFragment;
    "targetAmountAndFee(address,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferAnchorOwnership(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenOwnership(address)": FunctionFragment;
    "withdrawETH(address)": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptAnchorOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTokenOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReserve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "anchor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "connectorTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectorTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "connectors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "conversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conversionWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "converterType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConnectorBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxConversionFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConversionWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "targetAmountAndFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferAnchorOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conversionWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "converterType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConnectorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConversionWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAmountAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAnchorOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class IConverter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IConverterInterface;

  functions: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptAnchorOwnership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    acceptTokenOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptTokenOwnership()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addReserve(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReserve(address,uint32)"(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    anchor(overrides?: CallOverrides): Promise<[string]>;

    "anchor()"(overrides?: CallOverrides): Promise<[string]>;

    connectorTokenCount(overrides?: CallOverrides): Promise<[number]>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<[number]>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<[number]>;

    "conversionFee()"(overrides?: CallOverrides): Promise<[number]>;

    conversionWhitelist(overrides?: CallOverrides): Promise<[string]>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<[string]>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    converterType(overrides?: CallOverrides): Promise<[number]>;

    "converterType()"(overrides?: CallOverrides): Promise<[number]>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    "isActive()"(overrides?: CallOverrides): Promise<[boolean]>;

    maxConversionFee(overrides?: CallOverrides): Promise<[number]>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawETH(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptAnchorOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptAnchorOwnership()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  acceptTokenOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptTokenOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  addReserve(
    _token: string,
    _ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReserve(address,uint32)"(
    _token: string,
    _ratio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  anchor(overrides?: CallOverrides): Promise<string>;

  "anchor()"(overrides?: CallOverrides): Promise<string>;

  connectorTokenCount(overrides?: CallOverrides): Promise<number>;

  "connectorTokenCount()"(overrides?: CallOverrides): Promise<number>;

  connectorTokens(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "connectorTokens(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  connectors(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  "connectors(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

  conversionFee(overrides?: CallOverrides): Promise<number>;

  "conversionFee()"(overrides?: CallOverrides): Promise<number>;

  conversionWhitelist(overrides?: CallOverrides): Promise<string>;

  "conversionWhitelist()"(overrides?: CallOverrides): Promise<string>;

  convert(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    _trader: string,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "convert(address,address,uint256,address,address)"(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    _trader: string,
    _beneficiary: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  converterType(overrides?: CallOverrides): Promise<number>;

  "converterType()"(overrides?: CallOverrides): Promise<number>;

  getConnectorBalance(
    _connectorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getConnectorBalance(address)"(
    _connectorToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  "isActive()"(overrides?: CallOverrides): Promise<boolean>;

  maxConversionFee(overrides?: CallOverrides): Promise<number>;

  "maxConversionFee()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  reserveBalance(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "reserveBalance(address)"(
    _reserveToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "reserveTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setConversionFee(
    _conversionFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConversionFee(uint32)"(
    _conversionFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConversionWhitelist(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConversionWhitelist(address)"(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  targetAmountAndFee(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "targetAmountAndFee(address,address,uint256)"(
    _sourceToken: string,
    _targetToken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferAnchorOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAnchorOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferTokenOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferTokenOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawETH(_to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawETH(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawTokens(address,address,uint256)"(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAnchorOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptAnchorOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    acceptTokenOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptTokenOwnership()"(overrides?: CallOverrides): Promise<void>;

    addReserve(
      _token: string,
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReserve(address,uint32)"(
      _token: string,
      _ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anchor(overrides?: CallOverrides): Promise<string>;

    "anchor()"(overrides?: CallOverrides): Promise<string>;

    connectorTokenCount(overrides?: CallOverrides): Promise<number>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<number>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, boolean, boolean]>;

    conversionFee(overrides?: CallOverrides): Promise<number>;

    "conversionFee()"(overrides?: CallOverrides): Promise<number>;

    conversionWhitelist(overrides?: CallOverrides): Promise<string>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<string>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<number>;

    "converterType()"(overrides?: CallOverrides): Promise<number>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    maxConversionFee(overrides?: CallOverrides): Promise<number>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(_to: string, overrides?: CallOverrides): Promise<void>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptAnchorOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    acceptTokenOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptTokenOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    addReserve(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReserve(address,uint32)"(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    "anchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "connectorTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectors(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "conversionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    conversionWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    "conversionWhitelist()"(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    converterType(overrides?: CallOverrides): Promise<BigNumber>;

    "converterType()"(overrides?: CallOverrides): Promise<BigNumber>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxConversionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxConversionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawETH(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAnchorOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptAnchorOwnership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    acceptTokenOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptTokenOwnership()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addReserve(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReserve(address,uint32)"(
      _token: string,
      _ratio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    anchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anchor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectorTokenCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectorTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectorTokens(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectorTokens(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "connectors(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "conversionFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "conversionWhitelist()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "convert(address,address,uint256,address,address)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      _trader: string,
      _beneficiary: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    converterType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "converterType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConnectorBalance(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getConnectorBalance(address)"(
      _connectorToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxConversionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxConversionFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveBalance(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveBalance(address)"(
      _reserveToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConversionFee(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConversionFee(uint32)"(
      _conversionFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConversionWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConversionWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    targetAmountAndFee(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "targetAmountAndFee(address,address,uint256)"(
      _sourceToken: string,
      _targetToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAnchorOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAnchorOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferTokenOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferTokenOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawTokens(address,address,uint256)"(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
