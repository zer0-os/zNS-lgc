/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "canCreate(uint256,address,address)": FunctionFragment;
    "setController()": FunctionFragment;
    "setSubController()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canCreate",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSubController",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "canCreate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubController",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRegistrarInterface;

  functions: {
    canCreate(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canCreate(uint256,address,address)"(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setController(overrides?: CallOverrides): Promise<[void]>;

    "setController()"(overrides?: CallOverrides): Promise<[void]>;

    setSubController(overrides?: CallOverrides): Promise<[void]>;

    "setSubController()"(overrides?: CallOverrides): Promise<[void]>;
  };

  canCreate(
    tokenId: BigNumberish,
    _owner: string,
    _controller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canCreate(uint256,address,address)"(
    tokenId: BigNumberish,
    _owner: string,
    _controller: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setController(overrides?: CallOverrides): Promise<void>;

  "setController()"(overrides?: CallOverrides): Promise<void>;

  setSubController(overrides?: CallOverrides): Promise<void>;

  "setSubController()"(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    canCreate(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canCreate(uint256,address,address)"(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setController(overrides?: CallOverrides): Promise<void>;

    "setController()"(overrides?: CallOverrides): Promise<void>;

    setSubController(overrides?: CallOverrides): Promise<void>;

    "setSubController()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canCreate(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canCreate(uint256,address,address)"(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setController(overrides?: CallOverrides): Promise<BigNumber>;

    "setController()"(overrides?: CallOverrides): Promise<BigNumber>;

    setSubController(overrides?: CallOverrides): Promise<BigNumber>;

    "setSubController()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canCreate(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCreate(uint256,address,address)"(
      tokenId: BigNumberish,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "setController()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSubController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "setSubController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
