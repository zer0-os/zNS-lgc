/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingControllerInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(address,uint256,uint256)": FunctionFragment;
    "bid(string,address,bytes,string,uint256)": FunctionFragment;
    "claimBid(string,address,address,bytes)": FunctionFragment;
    "configureDomain(uint256,address,uint256)": FunctionFragment;
    "safeClaimBid(string,address,address,bytes,bytes)": FunctionFragment;
    "unbid(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [string, string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBid",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureDomain",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeClaimBid",
    values: [string, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unbid",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeClaimBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbid", data: BytesLike): Result;

  events: {
    "Bid(address,string,uint256,address,address,bytes,string,uint256)": EventFragment;
    "BidAccepted(address,uint256,uint256)": EventFragment;
    "BidClaimed(address,address,uint256,string,address,bytes)": EventFragment;
    "DomainConfigured(uint256,address,uint256)": EventFragment;
    "Unbid(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbid"): EventFragment;
}

export class StakingController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingControllerInterface;

  functions: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureDomain(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureDomain(uint256,address,uint256)"(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    staker: string,
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBid(address,uint256,uint256)"(
    staker: string,
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bid(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bid(string,address,bytes,string,uint256)"(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimBid(
    domain: string,
    owner: string,
    controller: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimBid(string,address,address,bytes)"(
    domain: string,
    owner: string,
    controller: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureDomain(
    parentId: BigNumberish,
    stakeToken: string,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureDomain(uint256,address,uint256)"(
    parentId: BigNumberish,
    stakeToken: string,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeClaimBid(
    domain: string,
    owner: string,
    controller: string,
    controllerData: BytesLike,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeClaimBid(string,address,address,bytes,bytes)"(
    domain: string,
    owner: string,
    controller: string,
    controllerData: BytesLike,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unbid(
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unbid(uint256,uint256)"(
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    configureDomain(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "configureDomain(uint256,address,uint256)"(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Bid(
      staker: string | null,
      domain: null,
      parentId: BigNumberish | null,
      controller: string | null,
      stakeToken: null,
      data: null,
      proposal: null,
      amt: null
    ): EventFilter;

    BidAccepted(
      staker: null,
      id: null,
      parentId: BigNumberish | null
    ): EventFilter;

    BidClaimed(
      staker: null,
      owner: string | null,
      parentId: BigNumberish | null,
      domain: null,
      controller: string | null,
      data: null
    ): EventFilter;

    DomainConfigured(
      parentId: BigNumberish | null,
      stakeToken: null,
      minBid: null
    ): EventFilter;

    Unbid(staker: null, id: null, parentId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    configureDomain(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureDomain(uint256,address,uint256)"(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    configureDomain(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureDomain(uint256,address,uint256)"(
      parentId: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
