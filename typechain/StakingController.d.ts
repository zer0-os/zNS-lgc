/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingControllerInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(address,uint256,uint256)": FunctionFragment;
    "bancorNetwork()": FunctionFragment;
    "bid(string,address,bytes,string,uint256)": FunctionFragment;
    "bidByPath(string,address,bytes,string,tuple)": FunctionFragment;
    "bidFor(string,address,bytes,string,uint256,address)": FunctionFragment;
    "bidForByPath(string,address,bytes,string,tuple,address)": FunctionFragment;
    "claimBid(string,address,address,bytes)": FunctionFragment;
    "configureDomain(uint256,address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "onSetZnsController(address,address,uint256,bytes)": FunctionFragment;
    "safeClaimBid(string,address,address,bytes,bytes)": FunctionFragment;
    "setMinBid(uint256,uint256)": FunctionFragment;
    "stakeOf(address,uint256)": FunctionFragment;
    "stateOf(uint256)": FunctionFragment;
    "unbid(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bancorNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [string, string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidByPath",
    values: [
      string,
      string,
      BytesLike,
      string,
      { path: string[]; amount: BigNumberish; minOut: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidFor",
    values: [string, string, BytesLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidForByPath",
    values: [
      string,
      string,
      BytesLike,
      string,
      { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBid",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureDomain",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onSetZnsController",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeClaimBid",
    values: [string, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbid",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bancorNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidByPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidForByPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSetZnsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeClaimBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stateOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbid", data: BytesLike): Result;

  events: {
    "Bid(address,address,string,address,bytes,string,uint256)": EventFragment;
    "BidAccepted(address,uint256)": EventFragment;
    "BidClaimed(address,address,uint256,address)": EventFragment;
    "MinBidSet(uint256,uint256)": EventFragment;
    "StakeTokenSet(uint256,address)": EventFragment;
    "Unbid(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBidSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbid"): EventFragment;
}

export class StakingController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingControllerInterface;

  functions: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bancorNetwork(overrides?: CallOverrides): Promise<[string]>;

    "bancorNetwork()"(overrides?: CallOverrides): Promise<[string]>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bidByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "bidByPath(string,address,bytes,string,tuple)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    bidFor(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bidFor(string,address,bytes,string,uint256,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bidForByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "bidForByPath(string,address,bytes,string,tuple,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureDomain(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureDomain(uint256,address,uint256)"(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBid(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBid(uint256,uint256)"(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeOf(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, BigNumber, BigNumber, string, string] & {
          status: number;
          parentId: BigNumber;
          amount: BigNumber;
          createHash: string;
          stakeToken: string;
        }
      ]
    >;

    "stakeOf(address,uint256)"(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, BigNumber, BigNumber, string, string] & {
          status: number;
          parentId: BigNumber;
          amount: BigNumber;
          createHash: string;
          stakeToken: string;
        }
      ]
    >;

    stateOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { stakeToken: string; minBid: BigNumber }]
    >;

    "stateOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { stakeToken: string; minBid: BigNumber }]
    >;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    staker: string,
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBid(address,uint256,uint256)"(
    staker: string,
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bancorNetwork(overrides?: CallOverrides): Promise<string>;

  "bancorNetwork()"(overrides?: CallOverrides): Promise<string>;

  bid(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bid(string,address,bytes,string,uint256)"(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bidByPath(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "bidByPath(string,address,bytes,string,tuple)"(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  bidFor(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bidFor(string,address,bytes,string,uint256,address)"(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    amt: BigNumberish,
    staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bidForByPath(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
    staker: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "bidForByPath(string,address,bytes,string,tuple,address)"(
    domain: string,
    controller: string,
    data: BytesLike,
    proposal: string,
    swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
    staker: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimBid(
    domain: string,
    owner: string,
    controller: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimBid(string,address,address,bytes)"(
    domain: string,
    owner: string,
    controller: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureDomain(
    id: BigNumberish,
    stakeToken: string,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureDomain(uint256,address,uint256)"(
    id: BigNumberish,
    stakeToken: string,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _registry: string,
    _bancor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _registry: string,
    _bancor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onSetZnsController(
    sender: string,
    oldController: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onSetZnsController(address,address,uint256,bytes)"(
    sender: string,
    oldController: string,
    id: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeClaimBid(
    domain: string,
    owner: string,
    controller: string,
    controllerData: BytesLike,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeClaimBid(string,address,address,bytes,bytes)"(
    domain: string,
    owner: string,
    controller: string,
    controllerData: BytesLike,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBid(
    id: BigNumberish,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBid(uint256,uint256)"(
    id: BigNumberish,
    minBid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeOf(
    staker: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string, string] & {
      status: number;
      parentId: BigNumber;
      amount: BigNumber;
      createHash: string;
      stakeToken: string;
    }
  >;

  "stakeOf(address,uint256)"(
    staker: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string, string] & {
      status: number;
      parentId: BigNumber;
      amount: BigNumber;
      createHash: string;
      stakeToken: string;
    }
  >;

  stateOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakeToken: string; minBid: BigNumber }>;

  "stateOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { stakeToken: string; minBid: BigNumber }>;

  unbid(
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unbid(uint256,uint256)"(
    id: BigNumberish,
    parentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bancorNetwork(overrides?: CallOverrides): Promise<string>;

    "bancorNetwork()"(overrides?: CallOverrides): Promise<string>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bidByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "bidByPath(string,address,bytes,string,tuple)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    bidFor(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidFor(string,address,bytes,string,uint256,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bidForByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "bidForByPath(string,address,bytes,string,tuple,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    configureDomain(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "configureDomain(uint256,address,uint256)"(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: string,
      _bancor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _registry: string,
      _bancor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBid(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBid(uint256,uint256)"(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeOf(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, string] & {
        status: number;
        parentId: BigNumber;
        amount: BigNumber;
        createHash: string;
        stakeToken: string;
      }
    >;

    "stakeOf(address,uint256)"(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, string] & {
        status: number;
        parentId: BigNumber;
        amount: BigNumber;
        createHash: string;
        stakeToken: string;
      }
    >;

    stateOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { stakeToken: string; minBid: BigNumber }>;

    "stateOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { stakeToken: string; minBid: BigNumber }>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Bid(
      staker: string | null,
      controller: string | null,
      domain: null,
      stakeToken: null,
      data: null,
      proposal: null,
      amt: null
    ): EventFilter;

    BidAccepted(staker: null, id: null): EventFilter;

    BidClaimed(
      staker: null,
      owner: string | null,
      id: BigNumberish | null,
      controller: string | null
    ): EventFilter;

    MinBidSet(id: BigNumberish | null, minBid: null): EventFilter;

    StakeTokenSet(id: BigNumberish | null, stakeToken: null): EventFilter;

    Unbid(staker: null, id: null, parentId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bancorNetwork(overrides?: CallOverrides): Promise<BigNumber>;

    "bancorNetwork()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bidByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "bidByPath(string,address,bytes,string,tuple)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    bidFor(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bidFor(string,address,bytes,string,uint256,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bidForByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "bidForByPath(string,address,bytes,string,tuple,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    configureDomain(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureDomain(uint256,address,uint256)"(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBid(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBid(uint256,uint256)"(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeOf(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeOf(address,uint256)"(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "stateOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBid(address,uint256,uint256)"(
      staker: string,
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bancorNetwork(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bancorNetwork()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bid(string,address,bytes,string,uint256)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bidByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "bidByPath(string,address,bytes,string,tuple)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    bidFor(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bidFor(string,address,bytes,string,uint256,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      amt: BigNumberish,
      staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bidForByPath(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "bidForByPath(string,address,bytes,string,tuple,address)"(
      domain: string,
      controller: string,
      data: BytesLike,
      proposal: string,
      swapData: { path: string[]; amount: BigNumberish; minOut: BigNumberish },
      staker: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimBid(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimBid(string,address,address,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    configureDomain(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureDomain(uint256,address,uint256)"(
      id: BigNumberish,
      stakeToken: string,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _registry: string,
      _bancor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onSetZnsController(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onSetZnsController(address,address,uint256,bytes)"(
      sender: string,
      oldController: string,
      id: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeClaimBid(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeClaimBid(string,address,address,bytes,bytes)"(
      domain: string,
      owner: string,
      controller: string,
      controllerData: BytesLike,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBid(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBid(uint256,uint256)"(
      id: BigNumberish,
      minBid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeOf(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeOf(address,uint256)"(
      staker: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbid(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unbid(uint256,uint256)"(
      id: BigNumberish,
      parentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
