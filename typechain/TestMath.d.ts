/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestMathInterface extends ethers.utils.Interface {
  functions: {
    "accurateRatioTest(uint256,uint256,uint256)": FunctionFragment;
    "floorSqrtTest(uint256)": FunctionFragment;
    "normalizedRatioTest(uint256,uint256,uint256)": FunctionFragment;
    "reducedRatioTest(uint256,uint256,uint256)": FunctionFragment;
    "roundDivTest(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accurateRatioTest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floorSqrtTest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "normalizedRatioTest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reducedRatioTest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundDivTest",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accurateRatioTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "floorSqrtTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "normalizedRatioTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reducedRatioTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundDivTest",
    data: BytesLike
  ): Result;

  events: {};
}

export class TestMath extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestMathInterface;

  functions: {
    accurateRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "accurateRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    floorSqrtTest(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "floorSqrtTest(uint256)"(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    normalizedRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "normalizedRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reducedRatioTest(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "reducedRatioTest(uint256,uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    roundDivTest(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "roundDivTest(uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accurateRatioTest(
    _a: BigNumberish,
    _b: BigNumberish,
    _scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "accurateRatioTest(uint256,uint256,uint256)"(
    _a: BigNumberish,
    _b: BigNumberish,
    _scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  floorSqrtTest(
    _num: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "floorSqrtTest(uint256)"(
    _num: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  normalizedRatioTest(
    _a: BigNumberish,
    _b: BigNumberish,
    _scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "normalizedRatioTest(uint256,uint256,uint256)"(
    _a: BigNumberish,
    _b: BigNumberish,
    _scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  reducedRatioTest(
    _n: BigNumberish,
    _d: BigNumberish,
    _max: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "reducedRatioTest(uint256,uint256,uint256)"(
    _n: BigNumberish,
    _d: BigNumberish,
    _max: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  roundDivTest(
    _n: BigNumberish,
    _d: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "roundDivTest(uint256,uint256)"(
    _n: BigNumberish,
    _d: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accurateRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "accurateRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    floorSqrtTest(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "floorSqrtTest(uint256)"(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    normalizedRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "normalizedRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reducedRatioTest(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "reducedRatioTest(uint256,uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    roundDivTest(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roundDivTest(uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accurateRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accurateRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floorSqrtTest(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "floorSqrtTest(uint256)"(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    normalizedRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "normalizedRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reducedRatioTest(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reducedRatioTest(uint256,uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundDivTest(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roundDivTest(uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accurateRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accurateRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floorSqrtTest(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "floorSqrtTest(uint256)"(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    normalizedRatioTest(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "normalizedRatioTest(uint256,uint256,uint256)"(
      _a: BigNumberish,
      _b: BigNumberish,
      _scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reducedRatioTest(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reducedRatioTest(uint256,uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundDivTest(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "roundDivTest(uint256,uint256)"(
      _n: BigNumberish,
      _d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
