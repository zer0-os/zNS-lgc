/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestReentrancyGuardAttackerInterface extends ethers.utils.Interface {
  functions: {
    "attacking()": FunctionFragment;
    "callProtectedMethod()": FunctionFragment;
    "callback()": FunctionFragment;
    "reentrancy()": FunctionFragment;
    "run()": FunctionFragment;
    "setCallProtectedMethod(bool)": FunctionFragment;
    "setReentrancy(bool)": FunctionFragment;
    "target()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "attacking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callProtectedMethod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "callback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reentrancy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCallProtectedMethod",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReentrancy",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;

  decodeFunctionResult(functionFragment: "attacking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callProtectedMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reentrancy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallProtectedMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReentrancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;

  events: {};
}

export class TestReentrancyGuardAttacker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestReentrancyGuardAttackerInterface;

  functions: {
    attacking(overrides?: CallOverrides): Promise<[boolean]>;

    "attacking()"(overrides?: CallOverrides): Promise<[boolean]>;

    callProtectedMethod(overrides?: CallOverrides): Promise<[boolean]>;

    "callProtectedMethod()"(overrides?: CallOverrides): Promise<[boolean]>;

    callback(overrides?: Overrides): Promise<ContractTransaction>;

    "callback()"(overrides?: Overrides): Promise<ContractTransaction>;

    reentrancy(overrides?: CallOverrides): Promise<[boolean]>;

    "reentrancy()"(overrides?: CallOverrides): Promise<[boolean]>;

    run(overrides?: Overrides): Promise<ContractTransaction>;

    "run()"(overrides?: Overrides): Promise<ContractTransaction>;

    setCallProtectedMethod(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCallProtectedMethod(bool)"(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setReentrancy(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setReentrancy(bool)"(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    "target()"(overrides?: CallOverrides): Promise<[string]>;
  };

  attacking(overrides?: CallOverrides): Promise<boolean>;

  "attacking()"(overrides?: CallOverrides): Promise<boolean>;

  callProtectedMethod(overrides?: CallOverrides): Promise<boolean>;

  "callProtectedMethod()"(overrides?: CallOverrides): Promise<boolean>;

  callback(overrides?: Overrides): Promise<ContractTransaction>;

  "callback()"(overrides?: Overrides): Promise<ContractTransaction>;

  reentrancy(overrides?: CallOverrides): Promise<boolean>;

  "reentrancy()"(overrides?: CallOverrides): Promise<boolean>;

  run(overrides?: Overrides): Promise<ContractTransaction>;

  "run()"(overrides?: Overrides): Promise<ContractTransaction>;

  setCallProtectedMethod(
    _callProtectedMethod: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCallProtectedMethod(bool)"(
    _callProtectedMethod: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setReentrancy(
    _reentrancy: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setReentrancy(bool)"(
    _reentrancy: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  "target()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    attacking(overrides?: CallOverrides): Promise<boolean>;

    "attacking()"(overrides?: CallOverrides): Promise<boolean>;

    callProtectedMethod(overrides?: CallOverrides): Promise<boolean>;

    "callProtectedMethod()"(overrides?: CallOverrides): Promise<boolean>;

    callback(overrides?: CallOverrides): Promise<void>;

    "callback()"(overrides?: CallOverrides): Promise<void>;

    reentrancy(overrides?: CallOverrides): Promise<boolean>;

    "reentrancy()"(overrides?: CallOverrides): Promise<boolean>;

    run(overrides?: CallOverrides): Promise<void>;

    "run()"(overrides?: CallOverrides): Promise<void>;

    setCallProtectedMethod(
      _callProtectedMethod: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCallProtectedMethod(bool)"(
      _callProtectedMethod: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReentrancy(
      _reentrancy: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReentrancy(bool)"(
      _reentrancy: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    "target()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    attacking(overrides?: CallOverrides): Promise<BigNumber>;

    "attacking()"(overrides?: CallOverrides): Promise<BigNumber>;

    callProtectedMethod(overrides?: CallOverrides): Promise<BigNumber>;

    "callProtectedMethod()"(overrides?: CallOverrides): Promise<BigNumber>;

    callback(overrides?: Overrides): Promise<BigNumber>;

    "callback()"(overrides?: Overrides): Promise<BigNumber>;

    reentrancy(overrides?: CallOverrides): Promise<BigNumber>;

    "reentrancy()"(overrides?: CallOverrides): Promise<BigNumber>;

    run(overrides?: Overrides): Promise<BigNumber>;

    "run()"(overrides?: Overrides): Promise<BigNumber>;

    setCallProtectedMethod(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCallProtectedMethod(bool)"(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setReentrancy(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setReentrancy(bool)"(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    "target()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attacking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "attacking()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callProtectedMethod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callProtectedMethod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callback(overrides?: Overrides): Promise<PopulatedTransaction>;

    "callback()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reentrancy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reentrancy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    run(overrides?: Overrides): Promise<PopulatedTransaction>;

    "run()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setCallProtectedMethod(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCallProtectedMethod(bool)"(
      _callProtectedMethod: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setReentrancy(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setReentrancy(bool)"(
      _reentrancy: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "target()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
