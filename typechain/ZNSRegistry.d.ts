/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ZNSRegistryInterface extends ethers.utils.Interface {
  functions: {
    "ROOT_ID()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "calcId(uint256,string)": FunctionFragment;
    "childCountOf(uint256)": FunctionFragment;
    "childCreateLimitOf(uint256)": FunctionFragment;
    "childImageRuleOf(uint256)": FunctionFragment;
    "controllerLikeOf(address,uint256)": FunctionFragment;
    "controllerOf(uint256)": FunctionFragment;
    "createDomain(uint256,string,address,address)": FunctionFragment;
    "createDomainSafeController(uint256,string,address,address,bytes)": FunctionFragment;
    "createDomainSafeMint(uint256,string,address,address,bytes)": FunctionFragment;
    "createLimitOf(uint256)": FunctionFragment;
    "depthOf(uint256)": FunctionFragment;
    "entryOf(uint256)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getId(string[])": FunctionFragment;
    "imageOf(uint256)": FunctionFragment;
    "imageRuleOf(uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "nameOf(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "parentOf(uint256)": FunctionFragment;
    "resolverOf(uint256)": FunctionFragment;
    "safeCreateDomain(uint256,string,address,address,bytes,bytes)": FunctionFragment;
    "safeSetController(uint256,address,bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setChildCreateLimit(uint256,uint256)": FunctionFragment;
    "setChildImageRule(uint256,uint8)": FunctionFragment;
    "setController(uint256,address)": FunctionFragment;
    "setImage(uint256,string)": FunctionFragment;
    "setResolver(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "validateName(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ROOT_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calcId",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "childCountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childCreateLimitOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "childImageRuleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerLikeOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDomain",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createDomainSafeController",
    values: [BigNumberish, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDomainSafeMint",
    values: [BigNumberish, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLimitOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depthOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getId", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "imageOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "imageRuleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parentOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolverOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeCreateDomain",
    values: [BigNumberish, string, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSetController",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setChildCreateLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildImageRule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setImage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateName",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "ROOT_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "childCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childCreateLimitOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childImageRuleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerLikeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDomainSafeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDomainSafeMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLimitOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depthOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imageOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "imageRuleOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parentOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolverOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeCreateDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeSetController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChildCreateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildImageRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateName",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseURISet(string)": EventFragment;
    "ChildCreateLimitSet(address,uint256,uint256)": EventFragment;
    "ChildImageRuleSet(address,uint256,uint8)": EventFragment;
    "ControllerSet(uint256,address,address,address)": EventFragment;
    "DomainCreated(uint256,uint256,string,address)": EventFragment;
    "ImageSet(address,uint256,string)": EventFragment;
    "ResolverSet(address,uint256,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildCreateLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildImageRuleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DomainCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImageSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolverSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ZNSRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ZNSRegistryInterface;

  functions: {
    ROOT_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ROOT_ID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    calcId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    childCountOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "childCountOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    childCreateLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "childCreateLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    childImageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "childImageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    controllerLikeOf(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "controllerLikeOf(address,uint256)"(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    controllerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "controllerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDomain(uint256,string,address,address)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDomainSafeController(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDomainSafeController(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDomainSafeMint(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDomainSafeMint(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "createLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depthOf(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "depthOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    entryOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          owner: string;
          parent: BigNumber;
          depth: BigNumber;
          controller: string;
          name: string;
          domain: string;
          resolver: string;
          image: string;
          createLimit: BigNumber;
          childCreateLimit: BigNumber;
          childCount: BigNumber;
          imageRule: number;
          childImageRule: number;
        }
      ] & {
        out: [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          owner: string;
          parent: BigNumber;
          depth: BigNumber;
          controller: string;
          name: string;
          domain: string;
          resolver: string;
          image: string;
          createLimit: BigNumber;
          childCreateLimit: BigNumber;
          childCount: BigNumber;
          imageRule: number;
          childImageRule: number;
        };
      }
    >;

    "entryOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          owner: string;
          parent: BigNumber;
          depth: BigNumber;
          controller: string;
          name: string;
          domain: string;
          resolver: string;
          image: string;
          createLimit: BigNumber;
          childCreateLimit: BigNumber;
          childCount: BigNumber;
          imageRule: number;
          childImageRule: number;
        }
      ] & {
        out: [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          owner: string;
          parent: BigNumber;
          depth: BigNumber;
          controller: string;
          name: string;
          domain: string;
          resolver: string;
          image: string;
          createLimit: BigNumber;
          childCreateLimit: BigNumber;
          childCount: BigNumber;
          imageRule: number;
          childImageRule: number;
        };
      }
    >;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getId(path: string[], overrides?: CallOverrides): Promise<[BigNumber]>;

    "getId(string[])"(
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    imageOf(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "imageOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    imageRuleOf(id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    "imageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nameOf(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "nameOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "parentOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    resolverOf(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "resolverOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    safeCreateDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeCreateDomain(uint256,string,address,address,bytes,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeSetController(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeSetController(uint256,address,bytes)"(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setChildCreateLimit(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setChildCreateLimit(uint256,uint256)"(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setChildImageRule(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setChildImageRule(uint256,uint8)"(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(uint256,address)"(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setImage(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setImage(uint256,string)"(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setResolver(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setResolver(uint256,string)"(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateName(name: string, overrides?: CallOverrides): Promise<[boolean]>;

    "validateName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ROOT_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "ROOT_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  calcId(
    parentId: BigNumberish,
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcId(uint256,string)"(
    parentId: BigNumberish,
    name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  childCountOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "childCountOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  childCreateLimitOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "childCreateLimitOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  childImageRuleOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "childImageRuleOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  controllerLikeOf(
    creator: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "controllerLikeOf(address,uint256)"(
    creator: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  controllerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "controllerOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createDomain(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDomain(uint256,string,address,address)"(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDomainSafeController(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    controllerData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDomainSafeController(uint256,string,address,address,bytes)"(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    controllerData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDomainSafeMint(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDomainSafeMint(uint256,string,address,address,bytes)"(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    mintData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createLimitOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "createLimitOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depthOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "depthOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  entryOf(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      owner: string;
      parent: BigNumber;
      depth: BigNumber;
      controller: string;
      name: string;
      domain: string;
      resolver: string;
      image: string;
      createLimit: BigNumber;
      childCreateLimit: BigNumber;
      childCount: BigNumber;
      imageRule: number;
      childImageRule: number;
    }
  >;

  "entryOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      owner: string;
      parent: BigNumber;
      depth: BigNumber;
      controller: string;
      name: string;
      domain: string;
      resolver: string;
      image: string;
      createLimit: BigNumber;
      childCreateLimit: BigNumber;
      childCount: BigNumber;
      imageRule: number;
      childImageRule: number;
    }
  >;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "exists(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getId(path: string[], overrides?: CallOverrides): Promise<BigNumber>;

  "getId(string[])"(
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  imageOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "imageOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  imageRuleOf(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "imageRuleOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    _owner: string,
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _owner: string,
    _controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nameOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "nameOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "parentOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resolverOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "resolverOf(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  safeCreateDomain(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    mintData: BytesLike,
    controllerData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeCreateDomain(uint256,string,address,address,bytes,bytes)"(
    parentId: BigNumberish,
    name: string,
    _owner: string,
    _controller: string,
    mintData: BytesLike,
    controllerData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeSetController(
    id: BigNumberish,
    controller: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeSetController(uint256,address,bytes)"(
    id: BigNumberish,
    controller: string,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setChildCreateLimit(
    id: BigNumberish,
    childCreateLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setChildCreateLimit(uint256,uint256)"(
    id: BigNumberish,
    childCreateLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setChildImageRule(
    id: BigNumberish,
    rule: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setChildImageRule(uint256,uint8)"(
    id: BigNumberish,
    rule: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    id: BigNumberish,
    controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(uint256,address)"(
    id: BigNumberish,
    controller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setImage(
    id: BigNumberish,
    image: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setImage(uint256,string)"(
    id: BigNumberish,
    image: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setResolver(
    id: BigNumberish,
    resolver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setResolver(uint256,string)"(
    id: BigNumberish,
    resolver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateName(name: string, overrides?: CallOverrides): Promise<boolean>;

  "validateName(string)"(
    name: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ROOT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    calcId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childCountOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childCountOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childCreateLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childCreateLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childImageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "childImageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    controllerLikeOf(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "controllerLikeOf(address,uint256)"(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    controllerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "controllerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createDomain(uint256,string,address,address)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDomainSafeController(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createDomainSafeController(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDomainSafeMint(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createDomainSafeMint(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depthOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "depthOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        owner: string;
        parent: BigNumber;
        depth: BigNumber;
        controller: string;
        name: string;
        domain: string;
        resolver: string;
        image: string;
        createLimit: BigNumber;
        childCreateLimit: BigNumber;
        childCount: BigNumber;
        imageRule: number;
        childImageRule: number;
      }
    >;

    "entryOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        owner: string;
        parent: BigNumber;
        depth: BigNumber;
        controller: string;
        name: string;
        domain: string;
        resolver: string;
        image: string;
        createLimit: BigNumber;
        childCreateLimit: BigNumber;
        childCount: BigNumber;
        imageRule: number;
        childImageRule: number;
      }
    >;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getId(path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    "getId(string[])"(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "imageOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    imageRuleOf(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "imageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _owner: string,
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nameOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "nameOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "parentOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolverOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "resolverOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    safeCreateDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeCreateDomain(uint256,string,address,address,bytes,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSetController(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeSetController(uint256,address,bytes)"(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildCreateLimit(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChildCreateLimit(uint256,uint256)"(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildImageRule(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChildImageRule(uint256,uint8)"(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      id: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(uint256,address)"(
      id: BigNumberish,
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setImage(
      id: BigNumberish,
      image: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setImage(uint256,string)"(
      id: BigNumberish,
      image: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setResolver(
      id: BigNumberish,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setResolver(uint256,string)"(
      id: BigNumberish,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateName(name: string, overrides?: CallOverrides): Promise<boolean>;

    "validateName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    BaseURISet(baseURI: null): EventFilter;

    ChildCreateLimitSet(
      owner: string | null,
      id: BigNumberish | null,
      childCreateLimit: null
    ): EventFilter;

    ChildImageRuleSet(
      owner: string | null,
      id: BigNumberish | null,
      rule: null
    ): EventFilter;

    ControllerSet(
      id: BigNumberish | null,
      oldController: string | null,
      newController: string | null,
      sender: null
    ): EventFilter;

    DomainCreated(
      parentId: BigNumberish | null,
      tokenId: null,
      name: null,
      owner: null
    ): EventFilter;

    ImageSet(
      owner: string | null,
      id: BigNumberish | null,
      image: null
    ): EventFilter;

    ResolverSet(
      owner: string | null,
      id: BigNumberish | null,
      resolver: null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    ROOT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childCountOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childCountOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childCreateLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childCreateLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childImageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "childImageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerLikeOf(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "controllerLikeOf(address,uint256)"(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controllerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "controllerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDomain(uint256,string,address,address)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDomainSafeController(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDomainSafeController(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDomainSafeMint(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDomainSafeMint(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depthOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "depthOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "entryOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getId(path: string[], overrides?: CallOverrides): Promise<BigNumber>;

    "getId(string[])"(
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "imageOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "imageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nameOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "nameOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parentOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "parentOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolverOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "resolverOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeCreateDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeCreateDomain(uint256,string,address,address,bytes,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeSetController(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeSetController(uint256,address,bytes)"(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(baseURI: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setChildCreateLimit(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setChildCreateLimit(uint256,uint256)"(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setChildImageRule(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setChildImageRule(uint256,uint8)"(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setController(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setController(uint256,address)"(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setImage(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setImage(uint256,string)"(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setResolver(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setResolver(uint256,string)"(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateName(name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "validateName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROOT_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROOT_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcId(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcId(uint256,string)"(
      parentId: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childCountOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "childCountOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childCreateLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "childCreateLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childImageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "childImageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerLikeOf(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "controllerLikeOf(address,uint256)"(
      creator: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controllerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "controllerOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDomain(uint256,string,address,address)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDomainSafeController(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDomainSafeController(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDomainSafeMint(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDomainSafeMint(uint256,string,address,address,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createLimitOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "createLimitOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depthOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depthOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entryOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getId(
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getId(string[])"(
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "imageOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageRuleOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "imageRuleOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _owner: string,
      _controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nameOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parentOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolverOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolverOf(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeCreateDomain(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeCreateDomain(uint256,string,address,address,bytes,bytes)"(
      parentId: BigNumberish,
      name: string,
      _owner: string,
      _controller: string,
      mintData: BytesLike,
      controllerData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeSetController(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeSetController(uint256,address,bytes)"(
      id: BigNumberish,
      controller: string,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setChildCreateLimit(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setChildCreateLimit(uint256,uint256)"(
      id: BigNumberish,
      childCreateLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setChildImageRule(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setChildImageRule(uint256,uint8)"(
      id: BigNumberish,
      rule: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setController(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(uint256,address)"(
      id: BigNumberish,
      controller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setImage(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setImage(uint256,string)"(
      id: BigNumberish,
      image: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setResolver(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setResolver(uint256,string)"(
      id: BigNumberish,
      resolver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateName(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateName(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
