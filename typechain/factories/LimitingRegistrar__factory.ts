/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { LimitingRegistrar } from "../LimitingRegistrar";

export class LimitingRegistrar__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<LimitingRegistrar> {
    return super.deploy(overrides || {}) as Promise<LimitingRegistrar>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LimitingRegistrar {
    return super.attach(address) as LimitingRegistrar;
  }
  connect(signer: Signer): LimitingRegistrar__factory {
    return super.connect(signer) as LimitingRegistrar__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LimitingRegistrar {
    return new Contract(address, _abi, signerOrProvider) as LimitingRegistrar;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "limits",
        type: "uint256[]",
      },
    ],
    name: "setLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635919ffb214610030575b600080fd5b61004a6004803603810190610045919061017b565b61004c565b005b60006100566100c6565b905080600201600061006891906100f3565b60005b838390508110156100c0578160020184848381811061008657fe5b905060200201359080600181540180825580915050600190039060005260206000200160009091909190915055808060010191505061006b565b50505050565b6000807f04aa27557c07e55a75592888f58fd511379f4b35607228cf5d91ebfbbcdef34f90508091505090565b50805460008255906000526020600020908101906101119190610114565b50565b5b8082111561012d576000816000905550600101610115565b5090565b60008083601f84011261014357600080fd5b8235905067ffffffffffffffff81111561015c57600080fd5b60208301915083602082028301111561017457600080fd5b9250929050565b6000806020838503121561018e57600080fd5b600083013567ffffffffffffffff8111156101a857600080fd5b6101b485828601610131565b9250925050925092905056fea2646970667358221220934d3330d736bd56518656cfbcd0a54aeff4909fe5ab9699b57bc90cc23f6d9264736f6c63430007060033";
