/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TestContractRegistryClient } from "../TestContractRegistryClient";

export class TestContractRegistryClient__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _registry: string,
    overrides?: Overrides
  ): Promise<TestContractRegistryClient> {
    return super.deploy(
      _registry,
      overrides || {}
    ) as Promise<TestContractRegistryClient>;
  }
  getDeployTransaction(
    _registry: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  attach(address: string): TestContractRegistryClient {
    return super.attach(address) as TestContractRegistryClient;
  }
  connect(signer: Signer): TestContractRegistryClient__factory {
    return super.connect(signer) as TestContractRegistryClient__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContractRegistryClient {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestContractRegistryClient;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IContractRegistry",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_prevOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdate",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "newOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "onlyOwnerCanUpdateRegistry",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prevRegistry",
    outputs: [
      {
        internalType: "contract IContractRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IContractRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "restoreRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_onlyOwnerCanUpdateRegistry",
        type: "bool",
      },
    ],
    name: "restrictRegistryUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107f13803806107f18339818101604052602081101561003357600080fd5b5051600080546001600160a01b03191633179055808061005281610083565b50600280546001600160a01b039092166001600160a01b0319928316811790915560038054909216179055506100e1565b6001600160a01b0381166100de576040805162461bcd60e51b815260206004820152601360248201527f4552525f494e56414c49445f4144445245535300000000000000000000000000604482015290519081900360640190fd5b50565b610701806100f06000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80637b10399911610076578063b4a176d31161005b578063b4a176d314610144578063d4ee1d901461014c578063f2fde38b14610154576100be565b80637b103999146101345780638da5cb5b1461013c576100be565b806349d10b64116100a757806349d10b641461010057806361cd756e1461010857806379ba50971461012c576100be565b8063024c7ec7146100c35780632fe8a6ad146100e4575b600080fd5b6100e2600480360360208110156100d957600080fd5b5035151561017a565b005b6100ec6101bb565b604080519115158252519081900360200190f35b6100e26101cb565b61011061040c565b604080516001600160a01b039092168252519081900360200190f35b6100e261041b565b6101106104df565b6101106104ee565b6100e26104fd565b610110610536565b6100e26004803603602081101561016a57600080fd5b50356001600160a01b0316610545565b6101826105df565b60038054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600354600160a01b900460ff1681565b6000546001600160a01b03163314806101ee5750600354600160a01b900460ff16155b610233576040805162461bcd60e51b815260206004820152601160248201527011549497d050d0d154d4d7d11153925151607a1b604482015290519081900360640190fd5b600061025e7f436f6e7472616374526567697374727900000000000000000000000000000000610634565b6002549091506001600160a01b0380831691161480159061028757506001600160a01b03811615155b6102d8576040805162461bcd60e51b815260206004820152601460248201527f4552525f494e56414c49445f5245474953545259000000000000000000000000604482015290519081900360640190fd5b60006001600160a01b0316816001600160a01b031663bb34534c7f436f6e74726163745265676973747279000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561034757600080fd5b505afa15801561035b573d6000803e3d6000fd5b505050506040513d602081101561037157600080fd5b50516001600160a01b031614156103cf576040805162461bcd60e51b815260206004820152601460248201527f4552525f494e56414c49445f5245474953545259000000000000000000000000604482015290519081900360640190fd5b60028054600380546001600160a01b0380841673ffffffffffffffffffffffffffffffffffffffff19928316179092559091169216919091179055565b6003546001600160a01b031681565b6001546001600160a01b0316331461046e576040805162461bcd60e51b815260206004820152601160248201527011549497d050d0d154d4d7d11153925151607a1b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b6002546001600160a01b031681565b6000546001600160a01b031681565b6105056105df565b6003546002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055565b6001546001600160a01b031681565b61054d6105df565b6000546001600160a01b03828116911614156105b0576040805162461bcd60e51b815260206004820152600e60248201527f4552525f53414d455f4f574e4552000000000000000000000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610632576040805162461bcd60e51b815260206004820152601160248201527011549497d050d0d154d4d7d11153925151607a1b604482015290519081900360640190fd5b565b600254604080517fbb34534c0000000000000000000000000000000000000000000000000000000081526004810184905290516000926001600160a01b03169163bb34534c916024808301926020929190829003018186803b15801561069957600080fd5b505afa1580156106ad573d6000803e3d6000fd5b505050506040513d60208110156106c357600080fd5b50519291505056fea264697066735822122072280fad6a2e5f26c45a88de466884400c845d9267310548ad4ebf13527c757c64736f6c634300060c0033";
