/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { XTransferRerouter } from "../XTransferRerouter";

export class XTransferRerouter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _reroutingEnabled: boolean,
    overrides?: Overrides
  ): Promise<XTransferRerouter> {
    return super.deploy(
      _reroutingEnabled,
      overrides || {}
    ) as Promise<XTransferRerouter>;
  }
  getDeployTransaction(
    _reroutingEnabled: boolean,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_reroutingEnabled, overrides || {});
  }
  attach(address: string): XTransferRerouter {
    return super.attach(address) as XTransferRerouter;
  }
  connect(signer: Signer): XTransferRerouter__factory {
    return super.connect(signer) as XTransferRerouter__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XTransferRerouter {
    return new Contract(address, _abi, signerOrProvider) as XTransferRerouter;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "_reroutingEnabled",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_prevOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_txId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_toBlockchain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "_to",
        type: "bytes32",
      },
    ],
    name: "TxReroute",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_enable",
        type: "bool",
      },
    ],
    name: "enableRerouting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "newOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_txId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_blockchain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_to",
        type: "bytes32",
      },
    ],
    name: "rerouteTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reroutingEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107d73803806107d78339818101604052602081101561003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160146101000a81548160ff02191690831515021790555050610729806100ae6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d4ee1d901161005b578063d4ee1d90146100f0578063e3db16f714610124578063edd63c3514610166578063f2fde38b146101865761007d565b806379ba5097146100825780638da5cb5b1461008c578063a3ebe71c146100c0575b600080fd5b61008a6101ca565b005b6100946103cf565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100ee600480360360208110156100d657600080fd5b810190808035151590602001909291905050506103f3565b005b6100f8610418565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101646004803603606081101561013a57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061043e565b005b61016e61048b565b60405180821515815260200191505060405180910390f35b6101c86004803603602081101561019c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061049e565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a60405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103fb6105ac565b80600160146101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61044661066f565b827fb5c80f971fb729e469ffa874c60425659ce82cb4adcfba9731af35ef87b6e6198383604051808381526020018281526020019250505060405180910390a2505050565b600160149054906101000a900460ff1681565b6104a66105ac565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4552525f53414d455f4f574e455200000000000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f4143434553535f44454e49454400000000000000000000000000000081525060200191505060405180910390fd5b565b600160149054906101000a900460ff166106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4552525f44495341424c4544000000000000000000000000000000000000000081525060200191505060405180910390fd5b56fea264697066735822122057e2eb63d89ab8a723882513acb32a94201f5a111469b5d056a7ff1622048d0664736f6c634300060c0033";
